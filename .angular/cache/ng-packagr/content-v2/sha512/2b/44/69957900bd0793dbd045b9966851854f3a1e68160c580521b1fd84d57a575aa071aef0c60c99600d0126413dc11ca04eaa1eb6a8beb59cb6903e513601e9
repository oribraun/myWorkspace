{"hash":"9bb1e551f042cf0a4f18a5598e6d624a8012d814","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, EventEmitter, Component, ViewEncapsulation, Inject, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nclass DynamicLabelingRoomService {\r\n    constructor() { }\r\n}\r\nDynamicLabelingRoomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nDynamicLabelingRoomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass SafePipe {\r\n    constructor(sanitizer) {\r\n        this.sanitizer = sanitizer;\r\n    }\r\n    transform(url) {\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n    }\r\n}\r\nSafePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\r\nSafePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, name: \"safe\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{ name: 'safe' }]\r\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass DynamicLabelingRoomComponent {\r\n    constructor(document) {\r\n        this.formSubmitted = false;\r\n        this.dragStarted = false;\r\n        this.resetViewAnimate = false;\r\n        this.animateMenu = false;\r\n        this.changeTemplateAnimation = false;\r\n        this.verticalDrag = {\r\n            version: 1,\r\n            // all numbers are percent values\r\n            view: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 50,\r\n                right: 0,\r\n                left: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'top',\r\n                    top: false,\r\n                    bottom: 'bottom',\r\n                    left: false,\r\n                    right: false,\r\n                }\r\n            },\r\n            labeling: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 50,\r\n                bottom: 0,\r\n                right: 0,\r\n                left: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'bottom',\r\n                    top: 'top',\r\n                    bottom: false,\r\n                    left: false,\r\n                    right: false,\r\n                }\r\n            },\r\n            minTop: 0,\r\n            maxTop: 100,\r\n            minLeft: 0,\r\n            maxLeft: 100\r\n        };\r\n        this.horizontalDrag = {\r\n            version: 2,\r\n            // all numbers are percent values\r\n            view: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                left: 50,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'right',\r\n                    top: false,\r\n                    bottom: false,\r\n                    left: 'left',\r\n                    right: false,\r\n                }\r\n            },\r\n            labeling: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 0,\r\n                right: 50,\r\n                left: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'left',\r\n                    top: false,\r\n                    bottom: false,\r\n                    left: false,\r\n                    right: 'right',\r\n                }\r\n            },\r\n            minTop: 0,\r\n            maxTop: 100,\r\n            minLeft: 0,\r\n            maxLeft: 100\r\n        };\r\n        this.expandDetails = {\r\n            expended: false,\r\n            parent: {},\r\n            original: {},\r\n            css: {\r\n                top: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n            }\r\n        };\r\n        this.iframeLoading = false;\r\n        this.mainList = [];\r\n        this.listCurrentIndex = 0;\r\n        this.templateType = 1;\r\n        this.data = {\r\n            // text: 'signature',\r\n            // url: 'https://polkadotmama.org/board-of-directors/',\r\n            // // url: 'https://www.apple.com/leadership/',\r\n            // showInIframe: true\r\n            text: '',\r\n            url: '',\r\n            showInIframe: false\r\n        };\r\n        this.obj = [\r\n        // {\r\n        //     blockName: '',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'not_a_signature', inputType: 'checkbox'},\r\n        //         {label: 'non_english_text', inputType: 'checkbox'},\r\n        //         {label: 'other', inputType: 'checkbox', value: 0},\r\n        //         {label: 'reason', inputType: 'text', depend: 'other', dependOnValue: 1}\r\n        //     ],\r\n        // },\r\n        // {\r\n        //     blockName: 'name',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'first_name', inputType: 'text', breakLine: true, center: true},\r\n        //         {label: 'last_name', inputType: 'text', fullLine: true},\r\n        //         {label: 'prefix', inputType: 'text', center: true},\r\n        //     ],\r\n        // },\r\n        // {\r\n        //     blockName: 'connections',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'phones', inputType: 'text_list'},\r\n        //         {label: 'faxes', inputType: 'text_list'},\r\n        //         {label: 'comments', inputType: 'textarea'},\r\n        //         {label: 'other', inputType: 'checkbox', value: 0},\r\n        //         {label: 'type', inputType: 'select', options: ['one', 'two', 'three'], depend: 'other'}\r\n        //     ],\r\n        // }\r\n        ];\r\n        this.onChange = new EventEmitter();\r\n        this.objErrMessage = '';\r\n        this.document = document;\r\n    }\r\n    listenToIframeLoad() {\r\n        if (this.iframe) {\r\n            this.iframeLoading = true;\r\n            const iframe = this.iframe.nativeElement;\r\n            iframe.onload = () => {\r\n                this.iframeLoading = false;\r\n            };\r\n        }\r\n    }\r\n    initObj() {\r\n        this.resetObjError();\r\n        this.mainList = [];\r\n        this.listCurrentIndex = 0;\r\n        const mainObj = this.handleInitObjIsList();\r\n        if (!this.obj || !this.obj.length) {\r\n            this.setObjError('obj have no items - please make sure obj has at least one DsProjectRoomBlock item');\r\n            return;\r\n        }\r\n        if (this.obj.length && !this.obj[0].fields) {\r\n            this.setObjError('obj have no structure - please make sure obj has at least one DsProjectRoomBlock item');\r\n            return;\r\n        }\r\n        for (const i in this.obj) {\r\n            for (const j in this.obj[i].fields) {\r\n                if (this.obj[i].fields[j].inputType === 'checkbox') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = 0;\r\n                    }\r\n                }\r\n                else if (this.obj[i].fields[j].inputType === 'text') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = '';\r\n                    }\r\n                }\r\n                else if (this.obj[i].fields[j].inputType === 'text_list') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = [];\r\n                    }\r\n                }\r\n                else {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.data && this.data.isList) {\r\n            this.setUpListObj();\r\n            this.addToMainList(this.listObj);\r\n            this.cleanListObj();\r\n            this.addToListInitObj(mainObj);\r\n        }\r\n    }\r\n    handleInitObjIsList() {\r\n        let returnObj = [];\r\n        const mainObj = this.obj;\r\n        if (mainObj.length && mainObj[0].length) {\r\n            this.obj = mainObj[0];\r\n            mainObj.shift();\r\n            returnObj = mainObj;\r\n        }\r\n        return returnObj;\r\n    }\r\n    addToListInitObj(mainObj) {\r\n        if (mainObj && mainObj.length) {\r\n            for (const o of mainObj) {\r\n                this.addToMainList(o);\r\n            }\r\n            this.listCurrentIndex = 0;\r\n            this.obj = this.mainList[this.listCurrentIndex];\r\n        }\r\n    }\r\n    setUpListObj() {\r\n        this.listObj = JSON.parse(JSON.stringify(this.obj));\r\n    }\r\n    cleanListObj() {\r\n        for (const i in this.listObj) {\r\n            for (const j in this.listObj[i].fields) {\r\n                if (this.listObj[i].fields[j].inputType === 'checkbox') {\r\n                    this.listObj[i].fields[j].value = 0;\r\n                }\r\n                else if (this.listObj[i].fields[j].inputType === 'text') {\r\n                    this.listObj[i].fields[j].value = '';\r\n                }\r\n                else if (this.listObj[i].fields[j].inputType === 'text_list') {\r\n                    this.listObj[i].fields[j].value = [];\r\n                }\r\n                else {\r\n                    this.listObj[i].fields[j].value = '';\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.resetDrag();\r\n        setTimeout(() => {\r\n            this.firstAnimateMenu();\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.listenToIframeLoad();\r\n        });\r\n    }\r\n    checkDepend(fields, item) {\r\n        if (!item.depend) {\r\n            return false;\r\n        }\r\n        const map = fields.map((o) => o.label);\r\n        const index = map.indexOf(item.depend);\r\n        let condition = fields[index].value;\r\n        if (item.dependOnValue) {\r\n            condition = fields[index].value === item.dependOnValue;\r\n        }\r\n        if (index > -1 && condition) {\r\n            return false;\r\n        }\r\n        else {\r\n            if (item.value) {\r\n                setTimeout(() => {\r\n                    item.value = '';\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    addToMainList(listObj) {\r\n        const obj = JSON.parse(JSON.stringify(listObj));\r\n        this.mainList.push(obj);\r\n        this.listCurrentIndex = this.mainList.length - 1;\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n        this.formSubmitted = false;\r\n        // console.log('this.mainList', this.mainList);\r\n    }\r\n    addToMainListIfFormIsValid() {\r\n        if (this.form && !(this.formSubmitted && this.form.invalid)) {\r\n            this.formSubmitted = false;\r\n            this.addToMainList(this.listObj);\r\n        }\r\n        else {\r\n            alert('please fill all required data before adding ' + this.data.listHeader);\r\n        }\r\n    }\r\n    removeFromMainList(index) {\r\n        this.mainList.splice(index, 1);\r\n        // console.log('this.listCurrentIndex', this.listCurrentIndex)\r\n        // console.log('index', index)\r\n        if (this.listCurrentIndex > 0) {\r\n            this.listCurrentIndex--;\r\n        }\r\n        else {\r\n            this.listCurrentIndex = 0;\r\n        }\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n    }\r\n    selectMainItem(index) {\r\n        this.listCurrentIndex = index;\r\n        console.log('this.mainList[this.listCurrentIndex]', this.mainList[this.listCurrentIndex]);\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n    }\r\n    getMainObjHeader(index) {\r\n        let header = (this.data.listItemDefaultHeader ? this.data.listItemDefaultHeader + ' ' : 'Item ') + (index + 1);\r\n        try {\r\n            let firstLabelValue = '';\r\n            let secondLabelValue = '';\r\n            if (this.data.listFirstItemIndex >= 0\r\n                && this.mainList[index]\r\n                && this.mainList[index][this.data.listObjIndex]\r\n                && this.mainList[index][this.data.listObjIndex].fields\r\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex]) {\r\n                firstLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex].value;\r\n            }\r\n            if (this.data.listSecondItemIndex >= 0\r\n                && this.mainList[index]\r\n                && this.mainList[index][this.data.listObjIndex]\r\n                && this.mainList[index][this.data.listObjIndex].fields\r\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex]) {\r\n                secondLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex].value;\r\n            }\r\n            if (firstLabelValue || secondLabelValue) {\r\n                if (secondLabelValue) {\r\n                    firstLabelValue += ' ';\r\n                }\r\n                header = firstLabelValue + secondLabelValue;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n        return header;\r\n    }\r\n    appendItemToList(item) {\r\n        let val = '';\r\n        if (item.listObj) {\r\n            val = this.cloneObject(item.listObj);\r\n        }\r\n        item.value.push(val);\r\n    }\r\n    removeItemToList(item, index) {\r\n        item.value.splice(index, 1);\r\n    }\r\n    cloneObject(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n    isArray(arr) {\r\n        return Array.isArray(arr);\r\n    }\r\n    trackByFn(index, item) {\r\n        return index;\r\n    }\r\n    originalObjectOrder(a, b) {\r\n        return 0;\r\n    }\r\n    preetyLabel(label) {\r\n        if (!label) {\r\n            return;\r\n        }\r\n        const str = label.replace(/_/g, ' ').replace(/-/g, ' ');\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    onMouseDown(e, name, type) {\r\n        const pos = this.getPointerPos(e, false);\r\n        this.currentDrag[name].mousedown = true;\r\n        this.currentDrag[name].startPos = pos;\r\n        this.currentDrag[name].type = type;\r\n        this.dragStarted = true;\r\n        this.document.body.classList.add('disable-mobile-refresh');\r\n    }\r\n    onMouseUp(e) {\r\n        if (this.currentDrag.view.mousedown) {\r\n            this.currentDrag.view.mousedown = false;\r\n            this.currentDrag.view.startPos = null;\r\n        }\r\n        if (this.currentDrag.labeling.mousedown) {\r\n            this.currentDrag.labeling.mousedown = false;\r\n            this.currentDrag.labeling.startPos = null;\r\n        }\r\n        this.dragStarted = false;\r\n        this.document.body.classList.remove('disable-mobile-refresh');\r\n    }\r\n    onMouseMove(e) {\r\n        if (this.dragStarted) {\r\n            let type = '';\r\n            if (this.currentDrag.view.mousedown) {\r\n                type = 'view';\r\n            }\r\n            if (this.currentDrag.labeling.mousedown) {\r\n                type = 'labeling';\r\n            }\r\n            if (!type) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const pos = this.getPointerPos(e, false);\r\n            const moveX = pos.x - this.currentDrag[type].startPos.x;\r\n            const moveY = pos.y - this.currentDrag[type].startPos.y;\r\n            const moveXPercent = moveX / this.dynamicLabelingRoom.nativeElement.clientWidth * 100;\r\n            const moveYPercent = moveY / this.dynamicLabelingRoom.nativeElement.clientHeight * 100;\r\n            // if (this.currentDrag[type].onMove.currentPos === 'top') {\r\n            //     moveYPercent = -moveYPercent;\r\n            // }\r\n            if (this.currentDrag.version === 1) {\r\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\r\n            }\r\n            else if (this.currentDrag.version === 2) {\r\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\r\n            }\r\n            else if (this.currentDrag.version === 3) {\r\n                // this.onMoveVersion3(type, moveXPercent, moveYPercent);\r\n            }\r\n            this.onMoveLimitTopBottom();\r\n            this.onMoveLimitLeft();\r\n            this.onMoveLimitRight();\r\n            // if (this.currentDrag.labeling.height < 0) {\r\n            //     this.currentDrag.datasets.height = 0;\r\n            //     this.currentDrag.serviceResults.top = this.currentDrag.minTop;\r\n            //     this.currentDrag.view.top = this.currentDrag.minTop;\r\n            // }\r\n            // if (this.currentDrag.datasets.height > this.currentDrag.maxTop) {\r\n            //     this.currentDrag.datasets.height = this.currentDrag.maxTop;\r\n            //     this.currentDrag.serviceResults.top = 100;\r\n            //     this.currentDrag.view.top = 100;\r\n            // }\r\n            // if (this.currentDrag.serviceResults.left < this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft) {\r\n            //     this.currentDrag.serviceResults.left = this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft;\r\n            //     this.currentDrag.view.right = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\r\n            // }\r\n            // if (this.currentDrag.serviceResults.left > this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft) {\r\n            //     this.currentDrag.serviceResults.left = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\r\n            //     this.currentDrag.view.right = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\r\n            // }\r\n            this.currentDrag[type].startPos = pos;\r\n        }\r\n    }\r\n    /**\r\n     * Get the pointer position\r\n     * param {any} e (event)\r\n     * param {any} preventTouch\r\n     * return {Object} { x: , y: }\r\n     */\r\n    getPointerPos(e, preventTouch) {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (e.clientX !== undefined && e.clientY !== undefined) {\r\n            x = e.clientX;\r\n            y = e.clientY;\r\n        }\r\n        else if (e.taretTouches) {\r\n            if (preventTouch) {\r\n                e.preventDefault();\r\n            }\r\n            x = e.taretTouches[0].clientX;\r\n            y = e.taretTouches[0].clientY;\r\n        }\r\n        else if (e.touches) {\r\n            if (preventTouch) {\r\n                e.preventDefault();\r\n            }\r\n            x = e.touches[0].clientX;\r\n            y = e.touches[0].clientY;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        };\r\n    }\r\n    onMoveLimitTopBottom() {\r\n        if (this.currentDrag.labeling.onMove.top) {\r\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.top]);\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] < 0) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = 0;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] > this.currentDrag.maxTop) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.labeling.onMove.bottom) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] < 0) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = 0;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] > this.currentDrag.maxTop) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.top) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] < 0) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = 0;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] > this.currentDrag.maxTop) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.bottom) {\r\n            // console.log(this.currentDrag.view[this.currentDrag.view.onMove.bottom]);\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] < 0) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = 0;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] > this.currentDrag.maxTop) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n    }\r\n    onMoveLimitLeft() {\r\n        if (this.currentDrag.labeling.onMove.left) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] < this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.left) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] < this.currentDrag.minLeft - this.currentDrag.view.marginLeft) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.minLeft - this.currentDrag.view.marginLeft;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.view.marginLeft) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.view.marginLeft;\r\n            }\r\n        }\r\n    }\r\n    onMoveLimitRight() {\r\n        if (this.currentDrag.labeling.onMove.right) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] < this.currentDrag.minLeft - this.currentDrag.labeling.marginRight) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.minLeft - this.currentDrag.labeling.marginRight;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.right) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.view.marginRight) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.view.marginRight;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] < this.currentDrag.minLeft - this.currentDrag.view.marginRight) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\r\n            }\r\n        }\r\n    }\r\n    onMoveVersion1(type, moveXPercent, moveYPercent) {\r\n        if (this.currentDrag[type].type.indexOf('bottom') > -1) {\r\n            if (this.currentDrag.labeling.onMove.top) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] += moveYPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.bottom) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] -= moveYPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.top) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] += moveYPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.bottom) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] -= moveYPercent;\r\n            }\r\n        }\r\n        if (this.currentDrag[type].type.indexOf('left') > -1) {\r\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.left])\r\n            // this.currentDrag.serviceResults.left += moveXPercent;\r\n            // this.currentDrag.view.right -= moveXPercent;\r\n            if (this.currentDrag.labeling.onMove.left) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.right) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.left) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.right) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\r\n            }\r\n        }\r\n        else if (this.currentDrag[type].type.indexOf('right') > -1) {\r\n            // this.currentDrag.serviceResults.left += moveXPercent;\r\n            // this.currentDrag.view.right -= moveXPercent;\r\n            if (this.currentDrag.labeling.onMove.left) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.right) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.left) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.right) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\r\n            }\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.obj) {\r\n            this.initObj();\r\n            this.onChangeObj();\r\n        }\r\n        if (changes.data && !changes.data.firstChange) {\r\n            setTimeout(() => {\r\n                this.listenToIframeLoad();\r\n            });\r\n        }\r\n        if (changes.templateType && !changes.templateType.firstChange) {\r\n            this.resetView();\r\n            this.animateChangingTemplate();\r\n        }\r\n    }\r\n    resetDrag() {\r\n        if (this.templateType === 1) {\r\n            this.currentDrag = JSON.parse(JSON.stringify(this.verticalDrag));\r\n        }\r\n        else {\r\n            this.currentDrag = JSON.parse(JSON.stringify(this.horizontalDrag));\r\n        }\r\n    }\r\n    resetView() {\r\n        this.resetViewAnimate = true;\r\n        this.resetDrag();\r\n        setTimeout(() => {\r\n            this.resetViewAnimate = false;\r\n        }, 300);\r\n    }\r\n    changeTemplateType() {\r\n        if (this.templateType === 1) {\r\n            this.templateType = 2;\r\n        }\r\n        else {\r\n            this.templateType = 1;\r\n        }\r\n        this.resetView();\r\n        this.animateChangingTemplate();\r\n    }\r\n    animateChangingTemplate() {\r\n        clearTimeout(this.changeTemplateAnimationTimeout);\r\n        this.changeTemplateAnimation = true;\r\n        this.changeTemplateAnimationTimeout = setTimeout(() => {\r\n            this.changeTemplateAnimation = false;\r\n        }, 1000);\r\n    }\r\n    onChangeObj() {\r\n        if (this.form) {\r\n            this.mainList[this.listCurrentIndex].isValid = !this.form.invalid;\r\n            this.formSubmitted = true;\r\n            this.form.onSubmit(undefined);\r\n            if (this.data && this.data.isList) {\r\n                const isValid = this.checkValidList();\r\n                const map = this.mainList.map((o) => this.getFinalObject(o));\r\n                const obj = {\r\n                    obj: this.mainList,\r\n                    valid: isValid,\r\n                    cleanBlocks: map,\r\n                };\r\n                this.onChange.emit(obj);\r\n            }\r\n            else {\r\n                const obj = {\r\n                    obj: this.obj,\r\n                    valid: !this.form.invalid,\r\n                    cleanBlocks: this.getFinalObject(this.obj)\r\n                };\r\n                this.onChange.emit(obj);\r\n            }\r\n        }\r\n    }\r\n    getFinalObject(currrentObj) {\r\n        const cleanBlocks = [];\r\n        for (const block of currrentObj) {\r\n            const obj = {\r\n                blockName: block.blockName, fields: []\r\n            };\r\n            for (const field of block.fields) {\r\n                const val = field.value === undefined ?\r\n                    (field.inputType === 'checkbox' ? 0 :\r\n                        (field.inputType === 'text_list' ? [] : '')) : field.value;\r\n                if (field.value.length) {\r\n                    obj.fields.push({\r\n                        label: field.label, value: field.value\r\n                    });\r\n                }\r\n            }\r\n            cleanBlocks.push(obj);\r\n        }\r\n        return cleanBlocks;\r\n    }\r\n    checkValidList() {\r\n        const cleanBlocks = [];\r\n        let valid = true;\r\n        for (const currentObj of this.mainList) {\r\n            for (const block of currentObj) {\r\n                for (const field of block.fields) {\r\n                    if (!field.value && field.required) {\r\n                        valid = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n    getObjKeysLength(listObj) {\r\n        return Object.keys(listObj).length;\r\n    }\r\n    firstAnimateMenu() {\r\n        clearTimeout(this.animateMenuTimeout);\r\n        this.animateMenu = true;\r\n        this.animateMenuTimeout = setTimeout(() => {\r\n            this.animateMenu = false;\r\n        }, 300 * 4);\r\n    }\r\n    expand() {\r\n        const el = this.dynamicLabelingRoom.nativeElement;\r\n        const rect = el.getBoundingClientRect();\r\n        const animation = 500;\r\n        if (!this.expandDetails.expended) {\r\n            const parent = el.parentElement;\r\n            this.expandDetails.parent = parent;\r\n            this.expandDetails.original = rect;\r\n            el.style.position = 'fixed';\r\n            el.style.background = '#fff';\r\n            el.style.zIndex = '9999';\r\n            el.style.top = rect.top + 'px';\r\n            el.style.left = rect.left + 'px';\r\n            el.style.width = rect.width + 'px';\r\n            el.style.height = rect.height + 'px';\r\n            requestAnimationFrame(() => {\r\n                el.style.transition = 'all ' + animation + 'ms ease-in-out';\r\n                el.style.top = '0';\r\n                el.style.left = '0';\r\n                el.style.width = '100%';\r\n                el.style.height = '100%';\r\n                this.expandDetails.expended = true;\r\n            });\r\n        }\r\n        else {\r\n            requestAnimationFrame(() => {\r\n                el.style.top = this.expandDetails.original.top + 'px';\r\n                el.style.left = this.expandDetails.original.left + 'px';\r\n                el.style.width = this.expandDetails.original.width + 'px';\r\n                el.style.height = this.expandDetails.original.height + 'px';\r\n                setTimeout(() => {\r\n                    el.style.transition = '';\r\n                    el.style.position = '';\r\n                    el.style.background = '';\r\n                    el.style.zIndex = '';\r\n                    el.style.top = '';\r\n                    el.style.left = '';\r\n                    el.style.width = '';\r\n                    el.style.height = '';\r\n                    this.expandDetails.expended = false;\r\n                }, animation);\r\n            });\r\n        }\r\n        // el.animate([\r\n        //     {top: '0'},\r\n        //     {left: '0'},\r\n        //     {width: '100%'},\r\n        //     {height: '100%'},\r\n        // ], {\r\n        //   duration: 1500,\r\n        //   fill: 'forwards',\r\n        // });\r\n        // let transform = 'translateY(-' + rect.top + 'px)';\r\n        // transform += ' translateX(-' + rect.left + 'px)';\r\n        // transform += ' translateX(-' + rect.left + 'px)';\r\n        // el.animate([\r\n        //   // keyframes\r\n        //   { transform: 'translateY(-' + rect.top + 'px)' + ' translateX(-' + rect.left + 'px)' }\r\n        // ], {\r\n        //   // timing options\r\n        //   duration: 1000,\r\n        //   easing: 'ease-in-out',\r\n        //   fill: 'forwards',\r\n        // });\r\n    }\r\n    setObjError(err) {\r\n        this.objErrMessage = err;\r\n    }\r\n    resetObjError() {\r\n        this.objErrMessage = '';\r\n    }\r\n}\r\nDynamicLabelingRoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomComponent, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });\r\nDynamicLabelingRoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DynamicLabelingRoomComponent, selector: \"lib-dynamic-labeling-room\", inputs: { mainCssObj: \"mainCssObj\", viewCssObj: \"viewCssObj\", formCssObj: \"formCssObj\", templateType: \"templateType\", data: \"data\", obj: \"obj\" }, outputs: { onChange: \"onChange\" }, host: { listeners: { \"document:mouseup\": \"onMouseUp($event)\", \"document:touchend\": \"onMouseUp($event)\", \"document:mousemove\": \"onMouseMove($event)\", \"document:touchmove\": \"onMouseMove($event)\" } }, viewQueries: [{ propertyName: \"dynamicLabelingRoom\", first: true, predicate: [\"dynamic_labeling_room\"], descendants: true }, { propertyName: \"iframe\", first: true, predicate: [\"iframe\"], descendants: true }, { propertyName: \"form\", first: true, predicate: [\"form\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"dynamic-labeling-room\\\" #dynamic_labeling_room\\r\\n     *ngIf=\\\"data && obj\\\"\\r\\n     [ngStyle]=\\\"mainCssObj\\\">\\r\\n    <div class=\\\"view\\\"\\r\\n         [ngClass]=\\\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\\\"\\r\\n         [ngStyle]=\\\"{\\r\\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\\r\\n            'top': currentDrag.view.top + '%',\\r\\n            'bottom': currentDrag.view.bottom + '%',\\r\\n            'left': currentDrag.view.left + '%',\\r\\n            'right': currentDrag.view.right + '%'\\r\\n            }\\\">\\r\\n        <div class=\\\"view-text\\\"\\r\\n             [style]=\\\"!data.url ? viewCssObj : ''\\\"\\r\\n             *ngIf=\\\"!data.url && data.text\\\">{{data.text}}</div>\\r\\n        <!--        <div *ngIf=\\\"show.url\\\"><a [href]=\\\"show.url\\\" target=\\\"_blank\\\">{{show.url}}</a></div>-->\\r\\n        <div class=\\\"iframe-wrapper\\\" *ngIf=\\\"data.url\\\">\\r\\n            <ng-container *ngIf=\\\"data.showInIframe\\\">\\r\\n                <div class=\\\"iframe-loader-wrapper\\\" *ngIf=\\\"iframeLoading\\\">\\r\\n                    <div class=\\\"iframe-loader\\\"><div></div><div></div><div></div><div></div></div>\\r\\n                </div>\\r\\n                <iframe [ngClass]=\\\"{'dragging': dragStarted}\\\" #iframe [src]=\\\"data.url | safe\\\"></iframe>\\r\\n            </ng-container>\\r\\n            <ng-container *ngIf=\\\"!data.showInIframe\\\">\\r\\n                <a [href]=\\\"data.url\\\" target=\\\"_blank\\\">{{data.url}}</a>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n        <div class=\\\"horizontal-drag horizontal-drag-bottom\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.bottom\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"></div>\\r\\n        <div class=\\\"vertical-drag vertical-drag-right\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.left\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'left, right')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'left, right')\\\"></div>\\r\\n    </div>\\r\\n    <form #form=\\\"ngForm\\\">\\r\\n        <div class=\\\"labeling\\\"\\r\\n             [ngClass]=\\\"{'animated-all': resetViewAnimate}\\\"\\r\\n             [ngStyle]=\\\"{\\r\\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\\r\\n                'top': currentDrag.labeling.top + '%',\\r\\n                'bottom': currentDrag.labeling.bottom + '%',\\r\\n                'left': currentDrag.labeling.left + '%',\\r\\n                'right': currentDrag.labeling.right + '%'\\r\\n                }\\\">\\r\\n            <div class=\\\"horizontal-drag horizontal-drag-top\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.top\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"></div>\\r\\n            <div class=\\\"vertical-drag vertical-drag-left\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.right\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"></div>\\r\\n            <div class=\\\"labeling-overflow\\\"\\r\\n                 [style]=\\\"formCssObj\\\">\\r\\n                <div class=\\\"labeling-header\\\" *ngIf=\\\"data.isList\\\" [ngClass]=\\\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    {{data.listHeader}} <span class=\\\"labeling-header-plus no-highlight\\\"\\r\\n                                              (click)=\\\"addToMainList(listObj)\\\">+</span>\\r\\n                    <br>\\r\\n                    <div class=\\\"labeling-header-item no-highlight\\\" *ngFor=\\\"let item of mainList; let i = index\\\"\\r\\n                         (click)=\\\"selectMainItem(i)\\\"\\r\\n                         [ngClass]=\\\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\\\">\\r\\n                        {{getMainObjHeader(i)}} <span *ngIf=\\\"mainList.length > 1\\\" class=\\\"labeling-header-item-minus no-highlight\\\" (click)=\\\"removeFromMainList(i)\\\">x</span>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div [ngClass]=\\\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    <div class=\\\"labeling-block\\\" *ngFor=\\\"let block of obj\\\">\\r\\n                        <div class=\\\"labeling-block-row\\\">\\r\\n                            <div class=\\\"labeling-block-row-column\\\">\\r\\n                                <div class=\\\"labeling-block-row-column-header\\\">\\r\\n                                    {{preetyLabel(block.blockName)}}\\r\\n                                    <div class=\\\"labeling-block-row-column-header-description\\\">\\r\\n                                        {{block.blockDesc}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"labeling-block-row-column-body\\\">\\r\\n                                    <div class=\\\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\\r\\n                                labeling-block-row-column-body-item-{{item.inputType}}\\\"\\r\\n                                         *ngFor=\\\"let item of block.fields\\\"\\r\\n                                         [ngStyle]=\\\"{\\r\\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\\r\\n                                    'max-width': (10/block.numColumns*10) + '%'\\r\\n                                   }\\\"\\r\\n                                         [ngClass]=\\\"{\\r\\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\\r\\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\\r\\n                                 'labeling-block-row-column-body-item-box-center': item.center\\r\\n                                 }\\\">\\r\\n                                        <div class=\\\"labeling-block-row-column-body-item-box\\\">\\r\\n                                            <div class=\\\"labeling-block-row-column-body-item-box-input\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [pattern]=\\\"item.pattern\\\"\\r\\n                                                       [(ngModel)]=\\\"item.value\\\"\\r\\n                                                       (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                       [attr.value]=\\\"item.value\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\\r\\n                                                       }\\\"\\r\\n                                                       [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'checkbox'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngModel]=\\\"item.value\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\"\\r\\n                                                       (change)=\\\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\\\">\\r\\n                                                <textarea *ngIf=\\\"item.inputType === 'textarea'\\\"\\r\\n                                                          [ngStyle]=\\\"item.css\\\"\\r\\n                                                          [name]=\\\"item.label\\\"\\r\\n                                                          [required]=\\\"item.required\\\"\\r\\n                                                          [(ngModel)]=\\\"item.value\\\"\\r\\n                                                          (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                          [attr.value]=\\\"item.value\\\"\\r\\n                                                          [ngClass]=\\\"{\\r\\n                                                              'required': formSubmitted &&\\r\\n                                                              form.controls[item.label] &&\\r\\n                                                              form.controls[item.label].errors &&\\r\\n                                                              (form.controls[item.label].errors.required)\\r\\n                                                          }\\\"\\r\\n                                                          [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                </textarea>\\r\\n                                                <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select'\\\"\\r\\n                                                        [ngStyle]=\\\"item.css\\\"\\r\\n                                                        [name]=\\\"item.label\\\"\\r\\n                                                        [required]=\\\"item.required\\\"\\r\\n                                                        [(ngModel)]=\\\"item.value\\\"\\r\\n                                                        (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                        [disabled]=\\\"checkDepend(block.fields, item)\\\"\\r\\n                                                        [attr.value]=\\\"item.value\\\"\\r\\n                                                        [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\">\\r\\n                                                    <option value=\\\"\\\"></option>\\r\\n                                                    <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>\\r\\n                                                </select>\\r\\n    <!--                                            <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select_multiple'\\\"-->\\r\\n    <!--                                                    multiple-->\\r\\n    <!--                                                    [ngStyle]=\\\"item.css\\\"-->\\r\\n    <!--                                                    [name]=\\\"item.label\\\"-->\\r\\n    <!--                                                    [required]=\\\"item.required\\\"-->\\r\\n    <!--                                                    [(ngModel)]=\\\"item.value\\\"-->\\r\\n    <!--                                                    (ngModelChange)=\\\"onChangeObj()\\\"-->\\r\\n    <!--                                                    [disabled]=\\\"checkDepend(block.fields, item)\\\"-->\\r\\n    <!--                                                    [attr.value]=\\\"item.value\\\"-->\\r\\n    <!--                                                    [ngClass]=\\\"{-->\\r\\n    <!--                                                       'required': formSubmitted &&-->\\r\\n    <!--                                                       form.controls[item.label] &&-->\\r\\n    <!--                                                       form.controls[item.label].errors &&-->\\r\\n    <!--                                                       (form.controls[item.label].errors.required)-->\\r\\n    <!--                                                   }\\\">-->\\r\\n    <!--                                                <option value=\\\"\\\"></option>-->\\r\\n    <!--                                                <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>-->\\r\\n    <!--                                            </select>-->\\r\\n                                                <div class=\\\"labeling-block-row-column-body-item-box-input-label\\\"\\r\\n                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-label-hover':\\r\\n                                                     item.inputType === 'text' ||\\r\\n                                                     item.inputType === 'number' ||\\r\\n                                                     item.inputType === 'email' ||\\r\\n                                                     item.inputType === 'textarea' ||\\r\\n                                                     item.inputType === 'select_multiple' ||\\r\\n                                                     item.inputType === 'select'}\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-label-text\\\">\\r\\n                                                        {{preetyLabel(item.label)}}\\r\\n                                                        <span *ngIf=\\\"item.inputType === 'text_list'\\\" class=\\\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\\\"\\r\\n                                                              (click)=\\\"appendItemToList(item)\\\">+</span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                                <ng-container *ngIf=\\\"item.inputType === 'text_list' && isArray(item.value)\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description\\\">\\r\\n                                                        {{item.description}}\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item\\\" *ngFor=\\\"let listItem of item.value; index as i; trackBy: trackByFn\\\">\\r\\n                                                        <ng-container *ngIf=\\\"!item.listObj\\\">\\r\\n                                                            <input [type]=\\\"item.inputType\\\"\\r\\n                                                                   [name]=\\\"item.label + '-' + i\\\"\\r\\n                                                                   [required]=\\\"item.required\\\"\\r\\n                                                                   [(ngModel)]=\\\"item.value[i]\\\"\\r\\n                                                                   [ngClass]=\\\"{\\r\\n                                                                       'required': formSubmitted &&\\r\\n                                                                       form.controls[item.label + '-' + i] &&\\r\\n                                                                       form.controls[item.label + '-' + i].errors &&\\r\\n                                                                       (form.controls[item.label + '-' + i].errors.required)\\r\\n                                                                   }\\\"\\r\\n                                                                   (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\" (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n                                                        </ng-container>\\r\\n                                                        <ng-container *ngIf=\\\"item.listObj\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-wrapper\\\"\\r\\n                                                                 [ngStyle]=\\\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\\\"\\r\\n                                                                 *ngFor=\\\"let objItem of item.value[i]; index as j;let last = last;\\\">\\r\\n                                                                <input [type]=\\\"objItem.inputType\\\"\\r\\n                                                                       [name]=\\\"item.label + '-' + objItem.label + '-' + i + '-' + j\\\"\\r\\n                                                                       [required]=\\\"objItem.required\\\"\\r\\n                                                                       [(ngModel)]=\\\"objItem.value\\\"\\r\\n                                                                       [attr.value]=\\\"objItem.value\\\"\\r\\n                                                                       [ngClass]=\\\"{\\r\\n                                                                           'required': formSubmitted &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\\r\\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\\r\\n                                                                       }\\\"\\r\\n                                                                       (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label\\\"\\r\\n                                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\\\">\\r\\n                                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label-text\\\">\\r\\n                                                                        {{preetyLabel(objItem.label)}}\\r\\n                                                                    </div>\\r\\n                                                                </div>\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\"\\r\\n                                                                     *ngIf=\\\"last\\\"\\r\\n                                                                     (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n\\r\\n                                                            </div>\\r\\n                                                        </ng-container>\\r\\n                                                    </div>\\r\\n                                                </ng-container>\\r\\n                                            </div>\\r\\n                                            <small class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description && item.inputType !== 'text_list'\\\">\\r\\n                                                {{item.description}}\\r\\n                                            </small>\\r\\n                                        </div>\\r\\n                                        <!--                        <div class=\\\"labeling-block-row-column-body-item-box-break-line\\\" *ngIf=\\\"item.break_line\\\"></div>-->\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"objErrMessage text-center\\\" *ngIf=\\\"objErrMessage\\\">\\r\\n                        {{objErrMessage}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n<!--    <div class=\\\"floating-template-button\\\"-->\\r\\n<!--         [ngClass]=\\\"{'floating-template-button-vertical': templateType === 2}\\\"-->\\r\\n<!--         (click)=\\\"changeTemplateType()\\\">-->\\r\\n<!--        <div class=\\\"lds-hourglass\\\"-->\\r\\n<!--             [title]=\\\"templateType === 1 ? 'vertical' : 'horizontal'\\\"-->\\r\\n<!--        [ngClass]=\\\"{'animate': changeTemplateAnimation}\\\"></div>-->\\r\\n<!--    </div>-->\\r\\n  <div class=\\\"menu\\\" [ngClass]=\\\"{'menu-hover-animate': animateMenu}\\\">\\r\\n    <div class=\\\"inner-menu\\\">\\r\\n      <i class=\\\"d-icon-sync\\\" title=\\\"change template\\\" (click)=\\\"changeTemplateType()\\\" [ngClass]=\\\"{'d-icon-animate': changeTemplateAnimation}\\\"></i>\\r\\n<!--      <i class=\\\"d-icon-reset\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"></i>-->\\r\\n      <i class=\\\"d-icon-expend\\\" title=\\\"full screen\\\" (click)=\\\"expand()\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"><span class=\\\"line\\\"></span></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".dynamic-labeling-room{height:100%;font-size:14px;position:relative;overflow:hidden}.dynamic-labeling-room .labeling{position:absolute;top:50%;left:0;right:0;overflow:hidden;background:#fff;color:#28282c}.dynamic-labeling-room .labeling .labeling-overflow{overflow-y:auto;overflow-x:hidden;height:100%}.dynamic-labeling-room .labeling-block{position:relative}.dynamic-labeling-room .labeling-block-row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.dynamic-labeling-room .labeling-block-row-column{flex:0 0 100%;max-width:100%;-webkit-box-flex:0}.dynamic-labeling-room .labeling-block-row-column-header{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%;margin-bottom:2%;font-weight:600}.dynamic-labeling-room .labeling-block-row-column-header-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body{position:relative;display:flex;flex-wrap:wrap}.dynamic-labeling-room .labeling-block-row-column-body-item{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-box{position:relative;margin-bottom:1.3rem;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input{position:relative;overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea{min-height:40px}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select{position:relative;display:block;width:100%;height:calc(1.2em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#28282c;background:#fff;background-clip:padding-box;border:1px solid #ececf0;border-radius:2px;outline:none;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select:focus{border:1.5px solid #2271bf}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select.required{border:1.5px solid #f80000}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item{position:relative;margin-bottom:.5rem}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-minus{position:absolute;top:6.5px;right:3px;width:.7rem;cursor:pointer;color:red;font-size:1.3em;vertical-align:middle;line-height:1}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper{position:relative;display:inline-block;margin:1%;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-list-item-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-break-line{flex-basis:50%!important;max-width:100%!important;margin-right:.005%}.dynamic-labeling-room .labeling-block-row-column-body-item-box-full-line{flex-basis:100%!important;max-width:100%!important}.dynamic-labeling-room .labeling-block-row-column-body-item-box-center{margin:0 auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box{height:auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input checkbox-container{height:14px;width:14px;position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input input{height:14px;width:14px;display:inline-block;vertical-align:top;float:left;margin:3px 3px 3px 4px}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input-label{position:relative;display:inline-block;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-col{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%}.dynamic-labeling-room .labeling-block-fixed{position:relative}.dynamic-labeling-room .labeling-header{position:relative;margin:5px 0;font-weight:600}.dynamic-labeling-room .labeling-header-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-header-item{position:relative;line-height:1;padding:5px;box-shadow:0 0 5px #565555;background:#77f377;display:inline-block;border-radius:5px;cursor:pointer;margin:0 14px 9px 0}.dynamic-labeling-room .labeling-header-item-minus{position:absolute;top:0px;right:-5px;color:red;cursor:pointer;line-height:0;font-size:1em}.dynamic-labeling-room .labeling-header-item-selected{box-shadow:0 0 10px #000}.dynamic-labeling-room .labeling-header-item-invalid{color:#f80000}.dynamic-labeling-room .labeling-header-fixed{position:relative}.dynamic-labeling-room .view{position:absolute;top:0;left:0;right:0;overflow:hidden}.dynamic-labeling-room .view .view-text{position:absolute;top:0;right:0;left:0;bottom:0;overflow-y:auto;overflow-x:hidden;white-space:pre}.dynamic-labeling-room .view .iframe-wrapper{width:100%;height:100%;text-align:center}.dynamic-labeling-room .view .iframe-wrapper iframe{border:none;width:100%;height:100%}.dynamic-labeling-room .view .iframe-wrapper .dragging{pointer-events:none}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper{position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(255,255,255,.5)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader{position:absolute;width:35px;height:35px;top:50%;left:50%;transform:translate(-50%,-50%)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div{box-sizing:border-box;display:block;position:absolute;width:25px;height:25px;margin:5px;border:2px solid #fff;border-radius:50%;animation:iframe-loader 1.2s cubic-bezier(.5,0,.5,1) infinite;border-color:#ccc transparent transparent transparent}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(1){animation-delay:-.45s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(2){animation-delay:-.3s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(3){animation-delay:-.15s}@keyframes iframe-loader{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.dynamic-labeling-room .view-with-url{overflow:hidden}.dynamic-labeling-room .horizontal-drag{position:absolute;left:0;right:0;cursor:move;padding:5px 0;z-index:1;text-align:center}.dynamic-labeling-room .horizontal-drag-top{top:0;border-top:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-top:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #a2e0e1;position:absolute;top:-1px}.dynamic-labeling-room .horizontal-drag-bottom{bottom:0;border-bottom:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-bottom:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #a2e0e1;position:absolute;bottom:-1px}.dynamic-labeling-room .vertical-drag{position:absolute;top:0;bottom:0;cursor:move;padding:0 3px}.dynamic-labeling-room .vertical-drag-left{border-right:1px solid #a2e0e1;right:0}.dynamic-labeling-room .vertical-drag-left:after{content:\\\"\\\";border-top:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;right:-8px;transform:translateY(-50%) rotate(45deg)}.dynamic-labeling-room .vertical-drag-right{left:0;border-left:1px solid #a2e0e1}.dynamic-labeling-room .vertical-drag-right:after{content:\\\"\\\";border-top:8px solid transparent;border-left:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;left:-8px;transform:translateY(-50%) rotate(-45deg)}.dynamic-labeling-room .floating-template-button{position:absolute;top:5px;right:5px;z-index:2}.dynamic-labeling-room .floating-template-button .lds-hourglass{position:relative;width:20px;height:20px;cursor:pointer;z-index:1}.dynamic-labeling-room .floating-template-button .lds-hourglass:after{content:\\\" \\\";display:block;border-radius:50%;width:0;height:0;box-sizing:border-box;border:10px solid #79d6d7;border-color:#79d6d7 transparent #79d6d7 transparent}.dynamic-labeling-room .floating-template-button .lds-hourglass.animate:after{animation:lds-hourglass 1.2s infinite}@keyframes lds-hourglass{0%{transform:rotate(0);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{transform:rotate(900deg);animation-timing-function:cubic-bezier(.215,.61,.355,1)}to{transform:rotate(1800deg)}}.dynamic-labeling-room .menu{position:absolute;top:0;right:0;padding:5px;z-index:2;overflow:hidden}.dynamic-labeling-room .menu:before{content:\\\"\\\";position:absolute;top:0;right:0;transition:all .3s ease-in-out;border:solid 5px #79d6d7;border-left:solid 5px transparent;border-bottom:solid 5px transparent}.dynamic-labeling-room .menu .inner-menu{overflow:hidden;position:relative;transition:all .3s ease-in-out;right:-89px}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]{display:inline-block;vertical-align:middle;position:relative}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:before,.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:after{content:\\\"\\\";pointer-events:none}.dynamic-labeling-room .menu .inner-menu i{transition:all .2s}.dynamic-labeling-room .menu .inner-menu .d-icon-sync{width:20px;height:20px;border:2px solid;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:before{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(-45deg);right:-7px;top:0}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:after{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(135deg);left:-7px;bottom:0}.dynamic-labeling-room .menu .inner-menu .d-icon-expend{width:20px;height:20px;border:transparent solid 4px;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-expend .line{position:absolute;top:-3px;bottom:-3px;right:5px;transform:rotate(45deg);background:2px;border-width:.5px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:before{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);right:-7px;top:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:after{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);left:-7px;bottom:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-reset{width:20px;height:20px;border-width:2px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-reset:before{position:absolute;width:0;height:0;left:-7px;bottom:0;border-width:6px;border-style:solid;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;transform:rotate(135deg)}.dynamic-labeling-room .menu .inner-menu .d-icon-reset,.dynamic-labeling-room .menu .inner-menu .d-icon-sync,.dynamic-labeling-room .menu .inner-menu .d-icon-expend{border-radius:50%;margin:4px;border-left-color:transparent}.dynamic-labeling-room .menu .inner-menu .d-icon-reset.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-sync.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-expend.d-icon-animate{animation:lds-hourglass 1s infinite}.dynamic-labeling-room .menu:hover:before,.dynamic-labeling-room .menu-hover-animate:before{border-top-color:#004a4b;border-right-color:#004a4b}.dynamic-labeling-room .menu:hover .inner-menu,.dynamic-labeling-room .menu-hover-animate .inner-menu{right:0}.dynamic-labeling-room .text-center{text-align:center}.dynamic-labeling-room .objErrMessage{color:red}.no-highlight{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}body.disable-mobile-refresh{overscroll-behavior-y:contain}*,:after,:before{box-sizing:border-box}\\n\"], directives: [{ type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1$1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i2.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i2.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }], pipes: { \"safe\": SafePipe }, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-dynamic-labeling-room', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"dynamic-labeling-room\\\" #dynamic_labeling_room\\r\\n     *ngIf=\\\"data && obj\\\"\\r\\n     [ngStyle]=\\\"mainCssObj\\\">\\r\\n    <div class=\\\"view\\\"\\r\\n         [ngClass]=\\\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\\\"\\r\\n         [ngStyle]=\\\"{\\r\\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\\r\\n            'top': currentDrag.view.top + '%',\\r\\n            'bottom': currentDrag.view.bottom + '%',\\r\\n            'left': currentDrag.view.left + '%',\\r\\n            'right': currentDrag.view.right + '%'\\r\\n            }\\\">\\r\\n        <div class=\\\"view-text\\\"\\r\\n             [style]=\\\"!data.url ? viewCssObj : ''\\\"\\r\\n             *ngIf=\\\"!data.url && data.text\\\">{{data.text}}</div>\\r\\n        <!--        <div *ngIf=\\\"show.url\\\"><a [href]=\\\"show.url\\\" target=\\\"_blank\\\">{{show.url}}</a></div>-->\\r\\n        <div class=\\\"iframe-wrapper\\\" *ngIf=\\\"data.url\\\">\\r\\n            <ng-container *ngIf=\\\"data.showInIframe\\\">\\r\\n                <div class=\\\"iframe-loader-wrapper\\\" *ngIf=\\\"iframeLoading\\\">\\r\\n                    <div class=\\\"iframe-loader\\\"><div></div><div></div><div></div><div></div></div>\\r\\n                </div>\\r\\n                <iframe [ngClass]=\\\"{'dragging': dragStarted}\\\" #iframe [src]=\\\"data.url | safe\\\"></iframe>\\r\\n            </ng-container>\\r\\n            <ng-container *ngIf=\\\"!data.showInIframe\\\">\\r\\n                <a [href]=\\\"data.url\\\" target=\\\"_blank\\\">{{data.url}}</a>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n        <div class=\\\"horizontal-drag horizontal-drag-bottom\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.bottom\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"></div>\\r\\n        <div class=\\\"vertical-drag vertical-drag-right\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.left\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'left, right')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'left, right')\\\"></div>\\r\\n    </div>\\r\\n    <form #form=\\\"ngForm\\\">\\r\\n        <div class=\\\"labeling\\\"\\r\\n             [ngClass]=\\\"{'animated-all': resetViewAnimate}\\\"\\r\\n             [ngStyle]=\\\"{\\r\\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\\r\\n                'top': currentDrag.labeling.top + '%',\\r\\n                'bottom': currentDrag.labeling.bottom + '%',\\r\\n                'left': currentDrag.labeling.left + '%',\\r\\n                'right': currentDrag.labeling.right + '%'\\r\\n                }\\\">\\r\\n            <div class=\\\"horizontal-drag horizontal-drag-top\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.top\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"></div>\\r\\n            <div class=\\\"vertical-drag vertical-drag-left\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.right\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"></div>\\r\\n            <div class=\\\"labeling-overflow\\\"\\r\\n                 [style]=\\\"formCssObj\\\">\\r\\n                <div class=\\\"labeling-header\\\" *ngIf=\\\"data.isList\\\" [ngClass]=\\\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    {{data.listHeader}} <span class=\\\"labeling-header-plus no-highlight\\\"\\r\\n                                              (click)=\\\"addToMainList(listObj)\\\">+</span>\\r\\n                    <br>\\r\\n                    <div class=\\\"labeling-header-item no-highlight\\\" *ngFor=\\\"let item of mainList; let i = index\\\"\\r\\n                         (click)=\\\"selectMainItem(i)\\\"\\r\\n                         [ngClass]=\\\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\\\">\\r\\n                        {{getMainObjHeader(i)}} <span *ngIf=\\\"mainList.length > 1\\\" class=\\\"labeling-header-item-minus no-highlight\\\" (click)=\\\"removeFromMainList(i)\\\">x</span>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div [ngClass]=\\\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    <div class=\\\"labeling-block\\\" *ngFor=\\\"let block of obj\\\">\\r\\n                        <div class=\\\"labeling-block-row\\\">\\r\\n                            <div class=\\\"labeling-block-row-column\\\">\\r\\n                                <div class=\\\"labeling-block-row-column-header\\\">\\r\\n                                    {{preetyLabel(block.blockName)}}\\r\\n                                    <div class=\\\"labeling-block-row-column-header-description\\\">\\r\\n                                        {{block.blockDesc}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"labeling-block-row-column-body\\\">\\r\\n                                    <div class=\\\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\\r\\n                                labeling-block-row-column-body-item-{{item.inputType}}\\\"\\r\\n                                         *ngFor=\\\"let item of block.fields\\\"\\r\\n                                         [ngStyle]=\\\"{\\r\\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\\r\\n                                    'max-width': (10/block.numColumns*10) + '%'\\r\\n                                   }\\\"\\r\\n                                         [ngClass]=\\\"{\\r\\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\\r\\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\\r\\n                                 'labeling-block-row-column-body-item-box-center': item.center\\r\\n                                 }\\\">\\r\\n                                        <div class=\\\"labeling-block-row-column-body-item-box\\\">\\r\\n                                            <div class=\\\"labeling-block-row-column-body-item-box-input\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [pattern]=\\\"item.pattern\\\"\\r\\n                                                       [(ngModel)]=\\\"item.value\\\"\\r\\n                                                       (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                       [attr.value]=\\\"item.value\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\\r\\n                                                       }\\\"\\r\\n                                                       [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'checkbox'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngModel]=\\\"item.value\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\"\\r\\n                                                       (change)=\\\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\\\">\\r\\n                                                <textarea *ngIf=\\\"item.inputType === 'textarea'\\\"\\r\\n                                                          [ngStyle]=\\\"item.css\\\"\\r\\n                                                          [name]=\\\"item.label\\\"\\r\\n                                                          [required]=\\\"item.required\\\"\\r\\n                                                          [(ngModel)]=\\\"item.value\\\"\\r\\n                                                          (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                          [attr.value]=\\\"item.value\\\"\\r\\n                                                          [ngClass]=\\\"{\\r\\n                                                              'required': formSubmitted &&\\r\\n                                                              form.controls[item.label] &&\\r\\n                                                              form.controls[item.label].errors &&\\r\\n                                                              (form.controls[item.label].errors.required)\\r\\n                                                          }\\\"\\r\\n                                                          [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                </textarea>\\r\\n                                                <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select'\\\"\\r\\n                                                        [ngStyle]=\\\"item.css\\\"\\r\\n                                                        [name]=\\\"item.label\\\"\\r\\n                                                        [required]=\\\"item.required\\\"\\r\\n                                                        [(ngModel)]=\\\"item.value\\\"\\r\\n                                                        (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                        [disabled]=\\\"checkDepend(block.fields, item)\\\"\\r\\n                                                        [attr.value]=\\\"item.value\\\"\\r\\n                                                        [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\">\\r\\n                                                    <option value=\\\"\\\"></option>\\r\\n                                                    <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>\\r\\n                                                </select>\\r\\n    <!--                                            <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select_multiple'\\\"-->\\r\\n    <!--                                                    multiple-->\\r\\n    <!--                                                    [ngStyle]=\\\"item.css\\\"-->\\r\\n    <!--                                                    [name]=\\\"item.label\\\"-->\\r\\n    <!--                                                    [required]=\\\"item.required\\\"-->\\r\\n    <!--                                                    [(ngModel)]=\\\"item.value\\\"-->\\r\\n    <!--                                                    (ngModelChange)=\\\"onChangeObj()\\\"-->\\r\\n    <!--                                                    [disabled]=\\\"checkDepend(block.fields, item)\\\"-->\\r\\n    <!--                                                    [attr.value]=\\\"item.value\\\"-->\\r\\n    <!--                                                    [ngClass]=\\\"{-->\\r\\n    <!--                                                       'required': formSubmitted &&-->\\r\\n    <!--                                                       form.controls[item.label] &&-->\\r\\n    <!--                                                       form.controls[item.label].errors &&-->\\r\\n    <!--                                                       (form.controls[item.label].errors.required)-->\\r\\n    <!--                                                   }\\\">-->\\r\\n    <!--                                                <option value=\\\"\\\"></option>-->\\r\\n    <!--                                                <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>-->\\r\\n    <!--                                            </select>-->\\r\\n                                                <div class=\\\"labeling-block-row-column-body-item-box-input-label\\\"\\r\\n                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-label-hover':\\r\\n                                                     item.inputType === 'text' ||\\r\\n                                                     item.inputType === 'number' ||\\r\\n                                                     item.inputType === 'email' ||\\r\\n                                                     item.inputType === 'textarea' ||\\r\\n                                                     item.inputType === 'select_multiple' ||\\r\\n                                                     item.inputType === 'select'}\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-label-text\\\">\\r\\n                                                        {{preetyLabel(item.label)}}\\r\\n                                                        <span *ngIf=\\\"item.inputType === 'text_list'\\\" class=\\\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\\\"\\r\\n                                                              (click)=\\\"appendItemToList(item)\\\">+</span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                                <ng-container *ngIf=\\\"item.inputType === 'text_list' && isArray(item.value)\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description\\\">\\r\\n                                                        {{item.description}}\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item\\\" *ngFor=\\\"let listItem of item.value; index as i; trackBy: trackByFn\\\">\\r\\n                                                        <ng-container *ngIf=\\\"!item.listObj\\\">\\r\\n                                                            <input [type]=\\\"item.inputType\\\"\\r\\n                                                                   [name]=\\\"item.label + '-' + i\\\"\\r\\n                                                                   [required]=\\\"item.required\\\"\\r\\n                                                                   [(ngModel)]=\\\"item.value[i]\\\"\\r\\n                                                                   [ngClass]=\\\"{\\r\\n                                                                       'required': formSubmitted &&\\r\\n                                                                       form.controls[item.label + '-' + i] &&\\r\\n                                                                       form.controls[item.label + '-' + i].errors &&\\r\\n                                                                       (form.controls[item.label + '-' + i].errors.required)\\r\\n                                                                   }\\\"\\r\\n                                                                   (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\" (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n                                                        </ng-container>\\r\\n                                                        <ng-container *ngIf=\\\"item.listObj\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-wrapper\\\"\\r\\n                                                                 [ngStyle]=\\\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\\\"\\r\\n                                                                 *ngFor=\\\"let objItem of item.value[i]; index as j;let last = last;\\\">\\r\\n                                                                <input [type]=\\\"objItem.inputType\\\"\\r\\n                                                                       [name]=\\\"item.label + '-' + objItem.label + '-' + i + '-' + j\\\"\\r\\n                                                                       [required]=\\\"objItem.required\\\"\\r\\n                                                                       [(ngModel)]=\\\"objItem.value\\\"\\r\\n                                                                       [attr.value]=\\\"objItem.value\\\"\\r\\n                                                                       [ngClass]=\\\"{\\r\\n                                                                           'required': formSubmitted &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\\r\\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\\r\\n                                                                       }\\\"\\r\\n                                                                       (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label\\\"\\r\\n                                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\\\">\\r\\n                                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label-text\\\">\\r\\n                                                                        {{preetyLabel(objItem.label)}}\\r\\n                                                                    </div>\\r\\n                                                                </div>\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\"\\r\\n                                                                     *ngIf=\\\"last\\\"\\r\\n                                                                     (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n\\r\\n                                                            </div>\\r\\n                                                        </ng-container>\\r\\n                                                    </div>\\r\\n                                                </ng-container>\\r\\n                                            </div>\\r\\n                                            <small class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description && item.inputType !== 'text_list'\\\">\\r\\n                                                {{item.description}}\\r\\n                                            </small>\\r\\n                                        </div>\\r\\n                                        <!--                        <div class=\\\"labeling-block-row-column-body-item-box-break-line\\\" *ngIf=\\\"item.break_line\\\"></div>-->\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"objErrMessage text-center\\\" *ngIf=\\\"objErrMessage\\\">\\r\\n                        {{objErrMessage}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n<!--    <div class=\\\"floating-template-button\\\"-->\\r\\n<!--         [ngClass]=\\\"{'floating-template-button-vertical': templateType === 2}\\\"-->\\r\\n<!--         (click)=\\\"changeTemplateType()\\\">-->\\r\\n<!--        <div class=\\\"lds-hourglass\\\"-->\\r\\n<!--             [title]=\\\"templateType === 1 ? 'vertical' : 'horizontal'\\\"-->\\r\\n<!--        [ngClass]=\\\"{'animate': changeTemplateAnimation}\\\"></div>-->\\r\\n<!--    </div>-->\\r\\n  <div class=\\\"menu\\\" [ngClass]=\\\"{'menu-hover-animate': animateMenu}\\\">\\r\\n    <div class=\\\"inner-menu\\\">\\r\\n      <i class=\\\"d-icon-sync\\\" title=\\\"change template\\\" (click)=\\\"changeTemplateType()\\\" [ngClass]=\\\"{'d-icon-animate': changeTemplateAnimation}\\\"></i>\\r\\n<!--      <i class=\\\"d-icon-reset\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"></i>-->\\r\\n      <i class=\\\"d-icon-expend\\\" title=\\\"full screen\\\" (click)=\\\"expand()\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"><span class=\\\"line\\\"></span></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".dynamic-labeling-room{height:100%;font-size:14px;position:relative;overflow:hidden}.dynamic-labeling-room .labeling{position:absolute;top:50%;left:0;right:0;overflow:hidden;background:#fff;color:#28282c}.dynamic-labeling-room .labeling .labeling-overflow{overflow-y:auto;overflow-x:hidden;height:100%}.dynamic-labeling-room .labeling-block{position:relative}.dynamic-labeling-room .labeling-block-row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.dynamic-labeling-room .labeling-block-row-column{flex:0 0 100%;max-width:100%;-webkit-box-flex:0}.dynamic-labeling-room .labeling-block-row-column-header{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%;margin-bottom:2%;font-weight:600}.dynamic-labeling-room .labeling-block-row-column-header-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body{position:relative;display:flex;flex-wrap:wrap}.dynamic-labeling-room .labeling-block-row-column-body-item{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-box{position:relative;margin-bottom:1.3rem;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input{position:relative;overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea{min-height:40px}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select{position:relative;display:block;width:100%;height:calc(1.2em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#28282c;background:#fff;background-clip:padding-box;border:1px solid #ececf0;border-radius:2px;outline:none;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select:focus{border:1.5px solid #2271bf}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select.required{border:1.5px solid #f80000}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item{position:relative;margin-bottom:.5rem}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-minus{position:absolute;top:6.5px;right:3px;width:.7rem;cursor:pointer;color:red;font-size:1.3em;vertical-align:middle;line-height:1}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper{position:relative;display:inline-block;margin:1%;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-list-item-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-break-line{flex-basis:50%!important;max-width:100%!important;margin-right:.005%}.dynamic-labeling-room .labeling-block-row-column-body-item-box-full-line{flex-basis:100%!important;max-width:100%!important}.dynamic-labeling-room .labeling-block-row-column-body-item-box-center{margin:0 auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box{height:auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input checkbox-container{height:14px;width:14px;position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input input{height:14px;width:14px;display:inline-block;vertical-align:top;float:left;margin:3px 3px 3px 4px}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input-label{position:relative;display:inline-block;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-col{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%}.dynamic-labeling-room .labeling-block-fixed{position:relative}.dynamic-labeling-room .labeling-header{position:relative;margin:5px 0;font-weight:600}.dynamic-labeling-room .labeling-header-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-header-item{position:relative;line-height:1;padding:5px;box-shadow:0 0 5px #565555;background:#77f377;display:inline-block;border-radius:5px;cursor:pointer;margin:0 14px 9px 0}.dynamic-labeling-room .labeling-header-item-minus{position:absolute;top:0px;right:-5px;color:red;cursor:pointer;line-height:0;font-size:1em}.dynamic-labeling-room .labeling-header-item-selected{box-shadow:0 0 10px #000}.dynamic-labeling-room .labeling-header-item-invalid{color:#f80000}.dynamic-labeling-room .labeling-header-fixed{position:relative}.dynamic-labeling-room .view{position:absolute;top:0;left:0;right:0;overflow:hidden}.dynamic-labeling-room .view .view-text{position:absolute;top:0;right:0;left:0;bottom:0;overflow-y:auto;overflow-x:hidden;white-space:pre}.dynamic-labeling-room .view .iframe-wrapper{width:100%;height:100%;text-align:center}.dynamic-labeling-room .view .iframe-wrapper iframe{border:none;width:100%;height:100%}.dynamic-labeling-room .view .iframe-wrapper .dragging{pointer-events:none}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper{position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(255,255,255,.5)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader{position:absolute;width:35px;height:35px;top:50%;left:50%;transform:translate(-50%,-50%)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div{box-sizing:border-box;display:block;position:absolute;width:25px;height:25px;margin:5px;border:2px solid #fff;border-radius:50%;animation:iframe-loader 1.2s cubic-bezier(.5,0,.5,1) infinite;border-color:#ccc transparent transparent transparent}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(1){animation-delay:-.45s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(2){animation-delay:-.3s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(3){animation-delay:-.15s}@keyframes iframe-loader{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.dynamic-labeling-room .view-with-url{overflow:hidden}.dynamic-labeling-room .horizontal-drag{position:absolute;left:0;right:0;cursor:move;padding:5px 0;z-index:1;text-align:center}.dynamic-labeling-room .horizontal-drag-top{top:0;border-top:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-top:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #a2e0e1;position:absolute;top:-1px}.dynamic-labeling-room .horizontal-drag-bottom{bottom:0;border-bottom:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-bottom:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #a2e0e1;position:absolute;bottom:-1px}.dynamic-labeling-room .vertical-drag{position:absolute;top:0;bottom:0;cursor:move;padding:0 3px}.dynamic-labeling-room .vertical-drag-left{border-right:1px solid #a2e0e1;right:0}.dynamic-labeling-room .vertical-drag-left:after{content:\\\"\\\";border-top:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;right:-8px;transform:translateY(-50%) rotate(45deg)}.dynamic-labeling-room .vertical-drag-right{left:0;border-left:1px solid #a2e0e1}.dynamic-labeling-room .vertical-drag-right:after{content:\\\"\\\";border-top:8px solid transparent;border-left:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;left:-8px;transform:translateY(-50%) rotate(-45deg)}.dynamic-labeling-room .floating-template-button{position:absolute;top:5px;right:5px;z-index:2}.dynamic-labeling-room .floating-template-button .lds-hourglass{position:relative;width:20px;height:20px;cursor:pointer;z-index:1}.dynamic-labeling-room .floating-template-button .lds-hourglass:after{content:\\\" \\\";display:block;border-radius:50%;width:0;height:0;box-sizing:border-box;border:10px solid #79d6d7;border-color:#79d6d7 transparent #79d6d7 transparent}.dynamic-labeling-room .floating-template-button .lds-hourglass.animate:after{animation:lds-hourglass 1.2s infinite}@keyframes lds-hourglass{0%{transform:rotate(0);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{transform:rotate(900deg);animation-timing-function:cubic-bezier(.215,.61,.355,1)}to{transform:rotate(1800deg)}}.dynamic-labeling-room .menu{position:absolute;top:0;right:0;padding:5px;z-index:2;overflow:hidden}.dynamic-labeling-room .menu:before{content:\\\"\\\";position:absolute;top:0;right:0;transition:all .3s ease-in-out;border:solid 5px #79d6d7;border-left:solid 5px transparent;border-bottom:solid 5px transparent}.dynamic-labeling-room .menu .inner-menu{overflow:hidden;position:relative;transition:all .3s ease-in-out;right:-89px}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]{display:inline-block;vertical-align:middle;position:relative}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:before,.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:after{content:\\\"\\\";pointer-events:none}.dynamic-labeling-room .menu .inner-menu i{transition:all .2s}.dynamic-labeling-room .menu .inner-menu .d-icon-sync{width:20px;height:20px;border:2px solid;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:before{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(-45deg);right:-7px;top:0}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:after{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(135deg);left:-7px;bottom:0}.dynamic-labeling-room .menu .inner-menu .d-icon-expend{width:20px;height:20px;border:transparent solid 4px;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-expend .line{position:absolute;top:-3px;bottom:-3px;right:5px;transform:rotate(45deg);background:2px;border-width:.5px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:before{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);right:-7px;top:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:after{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);left:-7px;bottom:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-reset{width:20px;height:20px;border-width:2px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-reset:before{position:absolute;width:0;height:0;left:-7px;bottom:0;border-width:6px;border-style:solid;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;transform:rotate(135deg)}.dynamic-labeling-room .menu .inner-menu .d-icon-reset,.dynamic-labeling-room .menu .inner-menu .d-icon-sync,.dynamic-labeling-room .menu .inner-menu .d-icon-expend{border-radius:50%;margin:4px;border-left-color:transparent}.dynamic-labeling-room .menu .inner-menu .d-icon-reset.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-sync.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-expend.d-icon-animate{animation:lds-hourglass 1s infinite}.dynamic-labeling-room .menu:hover:before,.dynamic-labeling-room .menu-hover-animate:before{border-top-color:#004a4b;border-right-color:#004a4b}.dynamic-labeling-room .menu:hover .inner-menu,.dynamic-labeling-room .menu-hover-animate .inner-menu{right:0}.dynamic-labeling-room .text-center{text-align:center}.dynamic-labeling-room .objErrMessage{color:red}.no-highlight{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}body.disable-mobile-refresh{overscroll-behavior-y:contain}*,:after,:before{box-sizing:border-box}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { dynamicLabelingRoom: [{\r\n                type: ViewChild,\r\n                args: ['dynamic_labeling_room']\r\n            }], iframe: [{\r\n                type: ViewChild,\r\n                args: ['iframe']\r\n            }], form: [{\r\n                type: ViewChild,\r\n                args: ['form']\r\n            }], mainCssObj: [{\r\n                type: Input\r\n            }], viewCssObj: [{\r\n                type: Input\r\n            }], formCssObj: [{\r\n                type: Input\r\n            }], templateType: [{\r\n                type: Input\r\n            }], data: [{\r\n                type: Input\r\n            }], obj: [{\r\n                type: Input\r\n            }], onChange: [{\r\n                type: Output\r\n            }], onMouseUp: [{\r\n                type: HostListener,\r\n                args: ['document:mouseup', ['$event']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['document:touchend', ['$event']]\r\n            }], onMouseMove: [{\r\n                type: HostListener,\r\n                args: ['document:mousemove', ['$event']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['document:touchmove', ['$event']]\r\n            }] } });\r\nclass DsProjectRoomBlock {\r\n    constructor(obj) {\r\n        this.blockName = '';\r\n        this.blockDesc = '';\r\n        this.fields = [];\r\n        this.isValid = true;\r\n        if (obj) {\r\n            if (obj.blockName) {\r\n                this.blockName = obj.blockName;\r\n            }\r\n            if (obj.blockDesc) {\r\n                this.blockDesc = obj.blockDesc;\r\n            }\r\n            if (obj.numColumns) {\r\n                this.numColumns = obj.numColumns;\r\n            }\r\n            if (obj.fields) {\r\n                for (const i in obj.fields) {\r\n                    this.fields.push(new DsProjectRoomBlockField(obj.fields[i]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DsProjectRoomBlockField {\r\n    constructor(obj) {\r\n        this.label = '';\r\n        this.description = '';\r\n        this.value = '';\r\n        this.inputType = '';\r\n        if (obj) {\r\n            for (const key in obj) {\r\n                if (obj[key] !== undefined && obj[key] !== null) {\r\n                    this[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DsProjectRoomData {\r\n    constructor(obj) {\r\n        this.text = '';\r\n        this.url = '';\r\n        this.showInIframe = false;\r\n        if (obj) {\r\n            for (const key in obj) {\r\n                if (obj[key] !== undefined && obj[key] !== null) {\r\n                    this[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\nclass DynamicLabelingRoomModule {\r\n}\r\nDynamicLabelingRoomModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nDynamicLabelingRoomModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, declarations: [DynamicLabelingRoomComponent,\r\n        SafePipe], imports: [CommonModule,\r\n        FormsModule,\r\n        HttpClientModule], exports: [DynamicLabelingRoomComponent] });\r\nDynamicLabelingRoomModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            HttpClientModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        DynamicLabelingRoomComponent,\r\n                        SafePipe\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        HttpClientModule\r\n                    ],\r\n                    exports: [\r\n                        DynamicLabelingRoomComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of dynamic-labeling-room\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DsProjectRoomBlock, DsProjectRoomBlockField, DsProjectRoomData, DynamicLabelingRoomComponent, DynamicLabelingRoomModule, DynamicLabelingRoomService };\n//# sourceMappingURL=dynamic-labeling-room.mjs.map\n","map":{"version":3,"file":"dynamic-labeling-room.mjs","sources":["../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.service.ts","../../../projects/dynamic-labeling-room/src/lib/safe.pipe.ts","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.component.ts","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.component.html","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.module.ts","../../../projects/dynamic-labeling-room/src/public-api.ts","../../../projects/dynamic-labeling-room/src/dynamic-labeling-room.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicLabelingRoomService {\n\n  constructor() { }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safe' })\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n","import {\n    AfterViewInit,\n    Component, DoCheck, ElementRef, EventEmitter,\n    HostListener,\n    Inject, Input,\n    OnChanges,\n    OnInit, Output,\n    SimpleChanges,\n    ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {DOCUMENT, KeyValue} from '@angular/common';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n    selector: 'lib-dynamic-labeling-room',\n    templateUrl: './dynamic-labeling-room.component.html',\n    styleUrls: ['./dynamic-labeling-room.component.less'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DynamicLabelingRoomComponent implements OnInit, AfterViewInit, OnChanges {\n\n    @ViewChild('dynamic_labeling_room') dynamicLabelingRoom: any;\n    @ViewChild('iframe') iframe: any;\n    @ViewChild('form') form: NgForm;\n    private document: Document;\n    public formSubmitted = false;\n    public dragStarted = false;\n    public resetViewAnimate = false;\n    public animateMenu = false;\n    public animateMenuTimeout;\n    public changeTemplateAnimation = false;\n    public changeTemplateAnimationTimeout;\n    public currentDrag;\n    public verticalDrag: any = {\n        version: 1,\n        // all numbers are percent values\n        view: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 50,\n            right: 0,\n            left: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'top',\n                top: false,\n                bottom: 'bottom',\n                left: false,\n                right: false,\n            }\n        },\n        labeling: {\n            mousedown: false,\n            height: '',\n            top: 50,\n            bottom: 0,\n            right: 0,\n            left: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'bottom',\n                top: 'top',\n                bottom: false,\n                left: false,\n                right: false,\n            }\n        },\n        minTop: 0,\n        maxTop: 100,\n        minLeft: 0,\n        maxLeft: 100\n    };\n    public horizontalDrag: any = {\n        version: 2,\n        // all numbers are percent values\n        view: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 0,\n            right: 0,\n            left: 50,\n            marginLeft: 0,\n            marginRight: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'right',\n                top: false,\n                bottom: false,\n                left: 'left',\n                right: false,\n            }\n        },\n        labeling: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 0,\n            right: 50,\n            left: 0,\n            marginLeft: 0,\n            marginRight: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'left',\n                top: false,\n                bottom: false,\n                left: false,\n                right: 'right',\n            }\n        },\n        minTop: 0,\n        maxTop: 100,\n        minLeft: 0,\n        maxLeft: 100\n    };\n    public expandDetails: any = {\n        expended: false,\n        parent: {},\n        original: {},\n        css: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        }\n    };\n    public iframeLoading = false;\n    public mainList = [];\n    public listCurrentIndex = 0;\n    public listObj: any;\n    @Input() mainCssObj;\n    @Input() viewCssObj;\n    @Input() formCssObj;\n    @Input() templateType = 1;\n    @Input() data: DsProjectRoomData = {\n        // text: 'signature',\n        // url: 'https://polkadotmama.org/board-of-directors/',\n        // // url: 'https://www.apple.com/leadership/',\n        // showInIframe: true\n        text: '',\n        url: '',\n        showInIframe: false\n    };\n    @Input() obj: DsProjectRoomBlock[] = [\n        // {\n        //     blockName: '',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'not_a_signature', inputType: 'checkbox'},\n        //         {label: 'non_english_text', inputType: 'checkbox'},\n        //         {label: 'other', inputType: 'checkbox', value: 0},\n        //         {label: 'reason', inputType: 'text', depend: 'other', dependOnValue: 1}\n        //     ],\n        // },\n        // {\n        //     blockName: 'name',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'first_name', inputType: 'text', breakLine: true, center: true},\n        //         {label: 'last_name', inputType: 'text', fullLine: true},\n        //         {label: 'prefix', inputType: 'text', center: true},\n        //     ],\n        // },\n        // {\n        //     blockName: 'connections',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'phones', inputType: 'text_list'},\n        //         {label: 'faxes', inputType: 'text_list'},\n        //         {label: 'comments', inputType: 'textarea'},\n        //         {label: 'other', inputType: 'checkbox', value: 0},\n        //         {label: 'type', inputType: 'select', options: ['one', 'two', 'three'], depend: 'other'}\n        //     ],\n        // }\n    ];\n    @Output() onChange: EventEmitter<any> = new EventEmitter<any>();\n    public objErrMessage = '';\n    constructor(\n        @Inject(DOCUMENT) document?: any\n    ) {\n        this.document = document;\n    }\n\n\n    listenToIframeLoad(): void {\n        if (this.iframe) {\n            this.iframeLoading = true;\n            const iframe = this.iframe.nativeElement;\n            iframe.onload = () => {\n                this.iframeLoading = false;\n            };\n        }\n    }\n\n    initObj(): void {\n        this.resetObjError();\n        this.mainList = [];\n        this.listCurrentIndex = 0;\n        const mainObj: any = this.handleInitObjIsList();\n        if (!this.obj || !this.obj.length) {\n            this.setObjError('obj have no items - please make sure obj has at least one DsProjectRoomBlock item');\n            return;\n        }\n        if (this.obj.length && !this.obj[0].fields) {\n            this.setObjError('obj have no structure - please make sure obj has at least one DsProjectRoomBlock item');\n            return;\n        }\n        for (const i in this.obj) {\n            for (const j in this.obj[i].fields) {\n                if (this.obj[i].fields[j].inputType === 'checkbox') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = 0;\n                    }\n                } else if (this.obj[i].fields[j].inputType === 'text') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = '';\n                    }\n                } else if (this.obj[i].fields[j].inputType === 'text_list') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = [];\n                    }\n                } else {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = '';\n                    }\n                }\n            }\n        }\n        if (this.data && this.data.isList) {\n            this.setUpListObj();\n            this.addToMainList(this.listObj);\n            this.cleanListObj();\n            this.addToListInitObj(mainObj);\n        }\n    }\n\n    handleInitObjIsList() {\n        let returnObj = [];\n        const mainObj: any = this.obj;\n        if (mainObj.length && mainObj[0].length) {\n            this.obj = mainObj[0];\n            mainObj.shift();\n            returnObj = mainObj;\n        }\n        return returnObj;\n    }\n\n    addToListInitObj(mainObj: DsProjectRoomBlock[]) {\n        if (mainObj && mainObj.length) {\n            for (const o of mainObj) {\n                this.addToMainList(o);\n            }\n            this.listCurrentIndex = 0;\n            this.obj = this.mainList[this.listCurrentIndex];\n        }\n    }\n\n    setUpListObj() {\n        this.listObj =  JSON.parse(JSON.stringify(this.obj));\n    }\n    cleanListObj() {\n        for (const i in this.listObj) {\n            for (const j in this.listObj[i].fields) {\n                if (this.listObj[i].fields[j].inputType === 'checkbox') {\n                    this.listObj[i].fields[j].value = 0;\n                } else if (this.listObj[i].fields[j].inputType === 'text') {\n                    this.listObj[i].fields[j].value = '';\n                } else if (this.listObj[i].fields[j].inputType === 'text_list') {\n                    this.listObj[i].fields[j].value = [];\n                } else {\n                    this.listObj[i].fields[j].value = '';\n                }\n            }\n        }\n    }\n    ngOnInit(): void {\n        this.resetDrag();\n        setTimeout(() => {\n            this.firstAnimateMenu()\n        });\n    }\n\n    ngAfterViewInit(): void {\n        setTimeout(() => {\n            this.listenToIframeLoad();\n        });\n    }\n\n    checkDepend(fields, item): boolean {\n        if (!item.depend) {\n            return false;\n        }\n        const map = fields.map((o) => o.label);\n        const index = map.indexOf(item.depend);\n        let condition = fields[index].value;\n        if (item.dependOnValue) {\n            condition = fields[index].value === item.dependOnValue;\n        }\n        if (index > -1 && condition) {\n            return false;\n        } else {\n            if (item.value) {\n                setTimeout(() => {\n                    item.value = '';\n                });\n            }\n            return true;\n        }\n    }\n\n    addToMainList(listObj): void {\n        const obj = JSON.parse(JSON.stringify(listObj));\n        this.mainList.push(obj);\n        this.listCurrentIndex = this.mainList.length - 1;\n        this.obj = this.mainList[this.listCurrentIndex];\n        this.formSubmitted = false;\n        // console.log('this.mainList', this.mainList);\n    }\n\n    addToMainListIfFormIsValid(): void {\n        if (this.form && !(this.formSubmitted && this.form.invalid)) {\n            this.formSubmitted = false;\n            this.addToMainList(this.listObj);\n        } else {\n            alert('please fill all required data before adding ' + this.data.listHeader);\n        }\n    }\n    removeFromMainList(index): void {\n        this.mainList.splice(index, 1);\n        // console.log('this.listCurrentIndex', this.listCurrentIndex)\n        // console.log('index', index)\n        if (this.listCurrentIndex > 0) {\n            this.listCurrentIndex--;\n        } else {\n            this.listCurrentIndex = 0;\n        }\n        this.obj = this.mainList[this.listCurrentIndex];\n    }\n    selectMainItem(index): void {\n        this.listCurrentIndex = index;\n        console.log('this.mainList[this.listCurrentIndex]', this.mainList[this.listCurrentIndex]);\n        this.obj = this.mainList[this.listCurrentIndex];\n    }\n    getMainObjHeader(index): string {\n        let header =  (this.data.listItemDefaultHeader ? this.data.listItemDefaultHeader + ' ' : 'Item ') + (index + 1);\n        try {\n            let firstLabelValue = '';\n            let secondLabelValue = '';\n            if (this.data.listFirstItemIndex >= 0\n                && this.mainList[index]\n                && this.mainList[index][this.data.listObjIndex]\n                && this.mainList[index][this.data.listObjIndex].fields\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex]) {\n                firstLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex].value;\n            }\n            if (this.data.listSecondItemIndex >= 0\n                && this.mainList[index]\n                && this.mainList[index][this.data.listObjIndex]\n                && this.mainList[index][this.data.listObjIndex].fields\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex]) {\n                secondLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex].value;\n            }\n            if (firstLabelValue || secondLabelValue) {\n                if (secondLabelValue) {\n                    firstLabelValue += ' ';\n                }\n                header = firstLabelValue + secondLabelValue;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return header;\n    }\n    appendItemToList(item): void {\n        let val = '';\n        if (item.listObj) {\n            val = this.cloneObject(item.listObj);\n        }\n        item.value.push(val);\n    }\n    removeItemToList(item, index): void {\n        item.value.splice(index, 1);\n    }\n    cloneObject(obj): any {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    isArray(arr): boolean {\n        return Array.isArray(arr);\n    }\n    trackByFn(index: any, item: any): number {\n        return index;\n    }\n    originalObjectOrder(a: KeyValue<number, string>, b: KeyValue<number, string>): number {\n        return 0;\n    }\n    preetyLabel(label): string {\n        if (!label) {\n            return;\n        }\n        const str =  label.replace(/_/g, ' ').replace(/-/g, ' ');\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    onMouseDown(e: any, name: string, type: string): void {\n        const pos = this.getPointerPos(e, false);\n        this.currentDrag[name].mousedown = true;\n        this.currentDrag[name].startPos = pos;\n        this.currentDrag[name].type = type;\n        this.dragStarted = true;\n        this.document.body.classList.add('disable-mobile-refresh');\n    }\n\n    @HostListener('document:mouseup', ['$event'])\n    @HostListener('document:touchend', ['$event'])\n    onMouseUp(e): void {\n        if (this.currentDrag.view.mousedown) {\n            this.currentDrag.view.mousedown = false;\n            this.currentDrag.view.startPos = null;\n        }\n        if (this.currentDrag.labeling.mousedown) {\n            this.currentDrag.labeling.mousedown = false;\n            this.currentDrag.labeling.startPos = null;\n        }\n        this.dragStarted = false;\n        this.document.body.classList.remove('disable-mobile-refresh');\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    @HostListener('document:touchmove', ['$event'])\n    onMouseMove(e): void {\n        if (this.dragStarted) {\n            let type = '';\n            if (this.currentDrag.view.mousedown) {\n                type = 'view';\n            }\n            if (this.currentDrag.labeling.mousedown) {\n                type = 'labeling';\n            }\n            if (!type) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            const pos = this.getPointerPos(e, false);\n            const moveX = pos.x - this.currentDrag[type].startPos.x;\n            const moveY = pos.y - this.currentDrag[type].startPos.y;\n            const moveXPercent = moveX / this.dynamicLabelingRoom.nativeElement.clientWidth * 100;\n            const moveYPercent = moveY / this.dynamicLabelingRoom.nativeElement.clientHeight * 100;\n            // if (this.currentDrag[type].onMove.currentPos === 'top') {\n            //     moveYPercent = -moveYPercent;\n            // }\n            if (this.currentDrag.version === 1) {\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\n            } else if (this.currentDrag.version === 2) {\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\n            } else if (this.currentDrag.version === 3) {\n                // this.onMoveVersion3(type, moveXPercent, moveYPercent);\n            }\n            this.onMoveLimitTopBottom();\n            this.onMoveLimitLeft();\n            this.onMoveLimitRight();\n\n            // if (this.currentDrag.labeling.height < 0) {\n            //     this.currentDrag.datasets.height = 0;\n            //     this.currentDrag.serviceResults.top = this.currentDrag.minTop;\n            //     this.currentDrag.view.top = this.currentDrag.minTop;\n            // }\n            // if (this.currentDrag.datasets.height > this.currentDrag.maxTop) {\n            //     this.currentDrag.datasets.height = this.currentDrag.maxTop;\n            //     this.currentDrag.serviceResults.top = 100;\n            //     this.currentDrag.view.top = 100;\n            // }\n            // if (this.currentDrag.serviceResults.left < this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft) {\n            //     this.currentDrag.serviceResults.left = this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft;\n            //     this.currentDrag.view.right = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\n            // }\n            // if (this.currentDrag.serviceResults.left > this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft) {\n            //     this.currentDrag.serviceResults.left = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\n            //     this.currentDrag.view.right = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\n            // }\n            this.currentDrag[type].startPos = pos;\n        }\n    }\n\n    /**\n     * Get the pointer position\n     * param {any} e (event)\n     * param {any} preventTouch\n     * return {Object} { x: , y: }\n     */\n    getPointerPos(e: any, preventTouch): any {\n        let x = 0;\n        let y = 0;\n        if (e.clientX !== undefined && e.clientY !== undefined) {\n            x = e.clientX;\n            y = e.clientY;\n        } else if (e.taretTouches) {\n            if (preventTouch) {\n                e.preventDefault();\n            }\n            x = e.taretTouches[0].clientX;\n            y = e.taretTouches[0].clientY;\n        } else if (e.touches) {\n            if (preventTouch) {\n                e.preventDefault();\n            }\n            x = e.touches[0].clientX;\n            y = e.touches[0].clientY;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n\n    onMoveLimitTopBottom(): void {\n        if (this.currentDrag.labeling.onMove.top) {\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.top]);\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] < 0) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = 0;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] > this.currentDrag.maxTop) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.labeling.onMove.bottom) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] < 0) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = 0;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] > this.currentDrag.maxTop) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.view.onMove.top) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] < 0) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = 0;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] > this.currentDrag.maxTop) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.view.onMove.bottom) {\n            // console.log(this.currentDrag.view[this.currentDrag.view.onMove.bottom]);\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] < 0) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = 0;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] > this.currentDrag.maxTop) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = this.currentDrag.maxTop;\n            }\n        }\n    }\n    onMoveLimitLeft(): void {\n        if (this.currentDrag.labeling.onMove.left) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] < this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft;\n            }\n        }\n        if (this.currentDrag.view.onMove.left) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] < this.currentDrag.minLeft - this.currentDrag.view.marginLeft) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.minLeft - this.currentDrag.view.marginLeft;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.view.marginLeft) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.view.marginLeft;\n            }\n        }\n    }\n    onMoveLimitRight(): void {\n        if (this.currentDrag.labeling.onMove.right) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] < this.currentDrag.minLeft - this.currentDrag.labeling.marginRight) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.minLeft - this.currentDrag.labeling.marginRight;\n            }\n        }\n        if (this.currentDrag.view.onMove.right) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.view.marginRight) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.view.marginRight;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] < this.currentDrag.minLeft - this.currentDrag.view.marginRight) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\n            }\n        }\n    }\n\n    onMoveVersion1(type, moveXPercent, moveYPercent): void {\n        if (this.currentDrag[type].type.indexOf('bottom') > -1) {\n            if (this.currentDrag.labeling.onMove.top) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] += moveYPercent;\n            }\n            if (this.currentDrag.labeling.onMove.bottom) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] -= moveYPercent;\n            }\n            if (this.currentDrag.view.onMove.top) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] += moveYPercent;\n            }\n            if (this.currentDrag.view.onMove.bottom) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] -= moveYPercent;\n            }\n        }\n        if (this.currentDrag[type].type.indexOf('left') > -1) {\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.left])\n            // this.currentDrag.serviceResults.left += moveXPercent;\n            // this.currentDrag.view.right -= moveXPercent;\n            if (this.currentDrag.labeling.onMove.left) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.labeling.onMove.right) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.left) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.right) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\n            }\n        }\n        else if (this.currentDrag[type].type.indexOf('right') > -1) {\n            // this.currentDrag.serviceResults.left += moveXPercent;\n            // this.currentDrag.view.right -= moveXPercent;\n            if (this.currentDrag.labeling.onMove.left) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.labeling.onMove.right) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.left) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.right) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.obj) {\n            this.initObj();\n            this.onChangeObj();\n        }\n        if (changes.data && !changes.data.firstChange) {\n            setTimeout(() => {\n                this.listenToIframeLoad();\n            });\n        }\n        if (changes.templateType && !changes.templateType.firstChange) {\n            this.resetView();\n            this.animateChangingTemplate();\n        }\n    }\n\n    resetDrag(): void {\n        if (this.templateType === 1) {\n            this.currentDrag = JSON.parse(JSON.stringify(this.verticalDrag));\n        } else {\n            this.currentDrag = JSON.parse(JSON.stringify(this.horizontalDrag));\n        }\n    }\n\n    resetView(): void {\n        this.resetViewAnimate = true;\n        this.resetDrag();\n        setTimeout(() => {\n            this.resetViewAnimate = false;\n        }, 300);\n    }\n\n    changeTemplateType(): void {\n        if (this.templateType === 1) {\n            this.templateType = 2;\n        } else {\n            this.templateType = 1;\n        }\n        this.resetView();\n        this.animateChangingTemplate();\n    }\n\n    animateChangingTemplate(): void {\n        clearTimeout(this.changeTemplateAnimationTimeout);\n        this.changeTemplateAnimation = true;\n        this.changeTemplateAnimationTimeout = setTimeout(() => {\n            this.changeTemplateAnimation = false;\n        }, 1000);\n    }\n\n    onChangeObj(): void {\n        if (this.form) {\n            this.mainList[this.listCurrentIndex].isValid = !this.form.invalid;\n            this.formSubmitted = true;\n            this.form.onSubmit(undefined);\n            if (this.data && this.data.isList) {\n                const isValid = this.checkValidList();\n                const map = this.mainList.map((o) => this.getFinalObject(o));\n                const obj = {\n                    obj: this.mainList,\n                    valid: isValid,\n                    cleanBlocks: map,\n                };\n                this.onChange.emit(obj);\n            } else {\n                const obj = {\n                    obj: this.obj,\n                    valid: !this.form.invalid,\n                    cleanBlocks: this.getFinalObject(this.obj)\n                };\n                this.onChange.emit(obj);\n            }\n        }\n    }\n\n    getFinalObject(currrentObj): any[] {\n        const cleanBlocks = [];\n        for (const block of currrentObj) {\n            const obj = {\n                blockName: block.blockName, fields: []\n            };\n            for (const field of block.fields) {\n                const val = field.value === undefined ?\n                    (field.inputType === 'checkbox' ? 0 :\n                            (field.inputType === 'text_list' ? [] : '')\n                    ) : field.value;\n                if (field.value.length) {\n                    obj.fields.push({\n                        label: field.label, value: field.value\n                    });\n                }\n            }\n            cleanBlocks.push(obj);\n        }\n        return cleanBlocks;\n    }\n\n    checkValidList(): boolean {\n        const cleanBlocks = [];\n        let valid = true;\n        for (const currentObj of this.mainList) {\n            for (const block of currentObj) {\n                for (const field of block.fields) {\n                    if (!field.value && field.required) {\n                        valid = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return valid;\n    }\n\n    getObjKeysLength(listObj): number {\n        return Object.keys(listObj).length;\n    }\n\n    firstAnimateMenu() {\n        clearTimeout(this.animateMenuTimeout);\n        this.animateMenu = true;\n        this.animateMenuTimeout = setTimeout(() => {\n            this.animateMenu = false;\n        }, 300 * 4);\n    }\n    expand() {\n        const el = this.dynamicLabelingRoom.nativeElement;\n        const rect = el.getBoundingClientRect();\n        const animation = 500;\n        if (!this.expandDetails.expended) {\n            const parent = el.parentElement;\n            this.expandDetails.parent = parent;\n            this.expandDetails.original = rect;\n            el.style.position = 'fixed';\n            el.style.background = '#fff';\n            el.style.zIndex = '9999';\n            el.style.top = rect.top + 'px';\n            el.style.left = rect.left + 'px';\n            el.style.width = rect.width + 'px';\n            el.style.height = rect.height + 'px';\n            requestAnimationFrame(() => {\n                el.style.transition = 'all ' + animation + 'ms ease-in-out';\n                el.style.top = '0';\n                el.style.left = '0';\n                el.style.width = '100%';\n                el.style.height = '100%';\n                this.expandDetails.expended = true;\n            });\n        } else {\n            requestAnimationFrame(() => {\n                el.style.top = this.expandDetails.original.top + 'px';\n                el.style.left = this.expandDetails.original.left + 'px';\n                el.style.width = this.expandDetails.original.width + 'px';\n                el.style.height = this.expandDetails.original.height + 'px';\n                setTimeout(() => {\n                    el.style.transition = '';\n                    el.style.position = '';\n                    el.style.background = '';\n                    el.style.zIndex = '';\n                    el.style.top = '';\n                    el.style.left = '';\n                    el.style.width = '';\n                    el.style.height = '';\n                    this.expandDetails.expended = false;\n                }, animation);\n            });\n        }\n        // el.animate([\n        //     {top: '0'},\n        //     {left: '0'},\n        //     {width: '100%'},\n        //     {height: '100%'},\n        // ], {\n        //   duration: 1500,\n        //   fill: 'forwards',\n        // });\n        // let transform = 'translateY(-' + rect.top + 'px)';\n        // transform += ' translateX(-' + rect.left + 'px)';\n        // transform += ' translateX(-' + rect.left + 'px)';\n        // el.animate([\n        //   // keyframes\n        //   { transform: 'translateY(-' + rect.top + 'px)' + ' translateX(-' + rect.left + 'px)' }\n        // ], {\n        //   // timing options\n        //   duration: 1000,\n        //   easing: 'ease-in-out',\n        //   fill: 'forwards',\n        // });\n    }\n\n    setObjError(err) {\n        this.objErrMessage = err;\n    }\n    resetObjError() {\n        this.objErrMessage = '';\n    }\n}\n\nexport class DsProjectRoomBlock {\n    blockName = '';\n    blockDesc = '';\n    numColumns: 2;\n    fields: DsProjectRoomBlockField[] = [];\n    isValid = true;\n\n    constructor(obj?) {\n        if (obj) {\n            if (obj.blockName) {\n                this.blockName = obj.blockName;\n            }\n            if (obj.blockDesc) {\n                this.blockDesc = obj.blockDesc;\n            }\n            if (obj.numColumns) {\n                this.numColumns = obj.numColumns;\n            }\n            if (obj.fields) {\n                for (const i in obj.fields) {\n                    this.fields.push( new DsProjectRoomBlockField(obj.fields[i]));\n                }\n            }\n        }\n    }\n}\n\nexport class DsProjectRoomBlockField {\n    label = '';\n    description = '';\n    value: any = '';\n    inputType = '';\n    required?: boolean;\n    pattern?: string;\n    listObj?: any;\n    depend: string;\n    dependOnValue: any;\n    breakLine: boolean;\n    fullLine: boolean;\n    center: boolean;\n    selectOptions: any[];\n    css: any;\n\n    constructor(obj?) {\n        if (obj) {\n            for (const key in obj) {\n                if (obj[key] !== undefined && obj[key] !== null) {\n                    this[key] = obj[key];\n                }\n            }\n        }\n    }\n}\n\nexport class DsProjectRoomData {\n    text = '';\n    url = '';\n    showInIframe = false;\n    isList?: boolean;\n    listHeader?: string;\n    listHeaderFixed?: boolean;\n    listItemDefaultHeader?: string;\n    listObjIndex?: number;\n    listFirstItemIndex?: number;\n    listSecondItemIndex?: number;\n\n    constructor(obj?) {\n        if (obj) {\n            for (const key in obj) {\n                if (obj[key] !== undefined && obj[key] !== null) {\n                    this[key] = obj[key];\n                }\n            }\n        }\n    }\n}\n","<div class=\"dynamic-labeling-room\" #dynamic_labeling_room\r\n     *ngIf=\"data && obj\"\r\n     [ngStyle]=\"mainCssObj\">\r\n    <div class=\"view\"\r\n         [ngClass]=\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\"\r\n         [ngStyle]=\"{\r\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\r\n            'top': currentDrag.view.top + '%',\r\n            'bottom': currentDrag.view.bottom + '%',\r\n            'left': currentDrag.view.left + '%',\r\n            'right': currentDrag.view.right + '%'\r\n            }\">\r\n        <div class=\"view-text\"\r\n             [style]=\"!data.url ? viewCssObj : ''\"\r\n             *ngIf=\"!data.url && data.text\">{{data.text}}</div>\r\n        <!--        <div *ngIf=\"show.url\"><a [href]=\"show.url\" target=\"_blank\">{{show.url}}</a></div>-->\r\n        <div class=\"iframe-wrapper\" *ngIf=\"data.url\">\r\n            <ng-container *ngIf=\"data.showInIframe\">\r\n                <div class=\"iframe-loader-wrapper\" *ngIf=\"iframeLoading\">\r\n                    <div class=\"iframe-loader\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n                <iframe [ngClass]=\"{'dragging': dragStarted}\" #iframe [src]=\"data.url | safe\"></iframe>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!data.showInIframe\">\r\n                <a [href]=\"data.url\" target=\"_blank\">{{data.url}}</a>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"horizontal-drag horizontal-drag-bottom\"\r\n             *ngIf=\"currentDrag.view.onMove.bottom\"\r\n             (mousedown)=\"onMouseDown($event, 'view', 'top, bottom')\"\r\n             (touchstart)=\"onMouseDown($event, 'view', 'top, bottom')\"></div>\r\n        <div class=\"vertical-drag vertical-drag-right\"\r\n             *ngIf=\"currentDrag.view.onMove.left\"\r\n             (mousedown)=\"onMouseDown($event, 'view', 'left, right')\"\r\n             (touchstart)=\"onMouseDown($event, 'view', 'left, right')\"></div>\r\n    </div>\r\n    <form #form=\"ngForm\">\r\n        <div class=\"labeling\"\r\n             [ngClass]=\"{'animated-all': resetViewAnimate}\"\r\n             [ngStyle]=\"{\r\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\r\n                'top': currentDrag.labeling.top + '%',\r\n                'bottom': currentDrag.labeling.bottom + '%',\r\n                'left': currentDrag.labeling.left + '%',\r\n                'right': currentDrag.labeling.right + '%'\r\n                }\">\r\n            <div class=\"horizontal-drag horizontal-drag-top\"\r\n                 *ngIf=\"currentDrag.labeling.onMove.top\"\r\n                 (mousedown)=\"onMouseDown($event, 'labeling', 'top, bottom')\"\r\n                 (touchstart)=\"onMouseDown($event, 'labeling', 'top, bottom')\"></div>\r\n            <div class=\"vertical-drag vertical-drag-left\"\r\n                 *ngIf=\"currentDrag.labeling.onMove.right\"\r\n                 (mousedown)=\"onMouseDown($event, 'labeling', 'left, right')\"\r\n                 (touchstart)=\"onMouseDown($event, 'labeling', 'left, right')\"></div>\r\n            <div class=\"labeling-overflow\"\r\n                 [style]=\"formCssObj\">\r\n                <div class=\"labeling-header\" *ngIf=\"data.isList\" [ngClass]=\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\">\r\n                    {{data.listHeader}} <span class=\"labeling-header-plus no-highlight\"\r\n                                              (click)=\"addToMainList(listObj)\">+</span>\r\n                    <br>\r\n                    <div class=\"labeling-header-item no-highlight\" *ngFor=\"let item of mainList; let i = index\"\r\n                         (click)=\"selectMainItem(i)\"\r\n                         [ngClass]=\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\">\r\n                        {{getMainObjHeader(i)}} <span *ngIf=\"mainList.length > 1\" class=\"labeling-header-item-minus no-highlight\" (click)=\"removeFromMainList(i)\">x</span>\r\n\r\n                    </div>\r\n                </div>\r\n                <div [ngClass]=\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\">\r\n                    <div class=\"labeling-block\" *ngFor=\"let block of obj\">\r\n                        <div class=\"labeling-block-row\">\r\n                            <div class=\"labeling-block-row-column\">\r\n                                <div class=\"labeling-block-row-column-header\">\r\n                                    {{preetyLabel(block.blockName)}}\r\n                                    <div class=\"labeling-block-row-column-header-description\">\r\n                                        {{block.blockDesc}}\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"labeling-block-row-column-body\">\r\n                                    <div class=\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\r\n                                labeling-block-row-column-body-item-{{item.inputType}}\"\r\n                                         *ngFor=\"let item of block.fields\"\r\n                                         [ngStyle]=\"{\r\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\r\n                                    'max-width': (10/block.numColumns*10) + '%'\r\n                                   }\"\r\n                                         [ngClass]=\"{\r\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\r\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\r\n                                 'labeling-block-row-column-body-item-box-center': item.center\r\n                                 }\">\r\n                                        <div class=\"labeling-block-row-column-body-item-box\">\r\n                                            <div class=\"labeling-block-row-column-body-item-box-input\">\r\n                                                <input *ngIf=\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\"\r\n                                                       [type]=\"item.inputType\"\r\n                                                       [ngStyle]=\"item.css\"\r\n                                                       [name]=\"item.label\"\r\n                                                       [required]=\"item.required\"\r\n                                                       [pattern]=\"item.pattern\"\r\n                                                       [(ngModel)]=\"item.value\"\r\n                                                       (ngModelChange)=\"onChangeObj()\"\r\n                                                       [attr.value]=\"item.value\"\r\n                                                       [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\r\n                                                       }\"\r\n                                                       [disabled]=\"checkDepend(block.fields, item)\">\r\n                                                <input *ngIf=\"item.inputType === 'checkbox'\"\r\n                                                       [type]=\"item.inputType\"\r\n                                                       [ngModel]=\"item.value\"\r\n                                                       [ngStyle]=\"item.css\"\r\n                                                       [name]=\"item.label\"\r\n                                                       [required]=\"item.required\"\r\n                                                       [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required)\r\n                                                       }\"\r\n                                                       (change)=\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\">\r\n                                                <textarea *ngIf=\"item.inputType === 'textarea'\"\r\n                                                          [ngStyle]=\"item.css\"\r\n                                                          [name]=\"item.label\"\r\n                                                          [required]=\"item.required\"\r\n                                                          [(ngModel)]=\"item.value\"\r\n                                                          (ngModelChange)=\"onChangeObj()\"\r\n                                                          [attr.value]=\"item.value\"\r\n                                                          [ngClass]=\"{\r\n                                                              'required': formSubmitted &&\r\n                                                              form.controls[item.label] &&\r\n                                                              form.controls[item.label].errors &&\r\n                                                              (form.controls[item.label].errors.required)\r\n                                                          }\"\r\n                                                          [disabled]=\"checkDepend(block.fields, item)\">\r\n                                                </textarea>\r\n                                                <select name=\"\" *ngIf=\"item.inputType === 'select'\"\r\n                                                        [ngStyle]=\"item.css\"\r\n                                                        [name]=\"item.label\"\r\n                                                        [required]=\"item.required\"\r\n                                                        [(ngModel)]=\"item.value\"\r\n                                                        (ngModelChange)=\"onChangeObj()\"\r\n                                                        [disabled]=\"checkDepend(block.fields, item)\"\r\n                                                        [attr.value]=\"item.value\"\r\n                                                        [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required)\r\n                                                       }\">\r\n                                                    <option value=\"\"></option>\r\n                                                    <option *ngFor=\"let o of item.selectOptions\" [value]=\"o\">{{o}}</option>\r\n                                                </select>\r\n    <!--                                            <select name=\"\" *ngIf=\"item.inputType === 'select_multiple'\"-->\r\n    <!--                                                    multiple-->\r\n    <!--                                                    [ngStyle]=\"item.css\"-->\r\n    <!--                                                    [name]=\"item.label\"-->\r\n    <!--                                                    [required]=\"item.required\"-->\r\n    <!--                                                    [(ngModel)]=\"item.value\"-->\r\n    <!--                                                    (ngModelChange)=\"onChangeObj()\"-->\r\n    <!--                                                    [disabled]=\"checkDepend(block.fields, item)\"-->\r\n    <!--                                                    [attr.value]=\"item.value\"-->\r\n    <!--                                                    [ngClass]=\"{-->\r\n    <!--                                                       'required': formSubmitted &&-->\r\n    <!--                                                       form.controls[item.label] &&-->\r\n    <!--                                                       form.controls[item.label].errors &&-->\r\n    <!--                                                       (form.controls[item.label].errors.required)-->\r\n    <!--                                                   }\">-->\r\n    <!--                                                <option value=\"\"></option>-->\r\n    <!--                                                <option *ngFor=\"let o of item.selectOptions\" [value]=\"o\">{{o}}</option>-->\r\n    <!--                                            </select>-->\r\n                                                <div class=\"labeling-block-row-column-body-item-box-input-label\"\r\n                                                     [ngClass]=\"{'labeling-block-row-column-body-item-box-input-label-hover':\r\n                                                     item.inputType === 'text' ||\r\n                                                     item.inputType === 'number' ||\r\n                                                     item.inputType === 'email' ||\r\n                                                     item.inputType === 'textarea' ||\r\n                                                     item.inputType === 'select_multiple' ||\r\n                                                     item.inputType === 'select'}\">\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-label-text\">\r\n                                                        {{preetyLabel(item.label)}}\r\n                                                        <span *ngIf=\"item.inputType === 'text_list'\" class=\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\"\r\n                                                              (click)=\"appendItemToList(item)\">+</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <ng-container *ngIf=\"item.inputType === 'text_list' && isArray(item.value)\">\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-description\" *ngIf=\"item.description\">\r\n                                                        {{item.description}}\r\n                                                    </div>\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-list-item\" *ngFor=\"let listItem of item.value; index as i; trackBy: trackByFn\">\r\n                                                        <ng-container *ngIf=\"!item.listObj\">\r\n                                                            <input [type]=\"item.inputType\"\r\n                                                                   [name]=\"item.label + '-' + i\"\r\n                                                                   [required]=\"item.required\"\r\n                                                                   [(ngModel)]=\"item.value[i]\"\r\n                                                                   [ngClass]=\"{\r\n                                                                       'required': formSubmitted &&\r\n                                                                       form.controls[item.label + '-' + i] &&\r\n                                                                       form.controls[item.label + '-' + i].errors &&\r\n                                                                       (form.controls[item.label + '-' + i].errors.required)\r\n                                                                   }\"\r\n                                                                   (ngModelChange)=\"onChangeObj()\">\r\n                                                            <div class=\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\" (click)=\"removeItemToList(item, i); onChangeObj();\">-</div>\r\n                                                        </ng-container>\r\n                                                        <ng-container *ngIf=\"item.listObj\">\r\n                                                            <div class=\"labeling-block-row-column-body-item-box-input-list-item-wrapper\"\r\n                                                                 [ngStyle]=\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\"\r\n                                                                 *ngFor=\"let objItem of item.value[i]; index as j;let last = last;\">\r\n                                                                <input [type]=\"objItem.inputType\"\r\n                                                                       [name]=\"item.label + '-' + objItem.label + '-' + i + '-' + j\"\r\n                                                                       [required]=\"objItem.required\"\r\n                                                                       [(ngModel)]=\"objItem.value\"\r\n                                                                       [attr.value]=\"objItem.value\"\r\n                                                                       [ngClass]=\"{\r\n                                                                           'required': formSubmitted &&\r\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\r\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\r\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\r\n                                                                       }\"\r\n                                                                       (ngModelChange)=\"onChangeObj()\">\r\n                                                                <div class=\"labeling-block-row-column-body-item-box-input-list-item-label\"\r\n                                                                     [ngClass]=\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\">\r\n                                                                    <div class=\"labeling-block-row-column-body-item-box-input-list-item-label-text\">\r\n                                                                        {{preetyLabel(objItem.label)}}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div class=\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\"\r\n                                                                     *ngIf=\"last\"\r\n                                                                     (click)=\"removeItemToList(item, i); onChangeObj();\">-</div>\r\n\r\n                                                            </div>\r\n                                                        </ng-container>\r\n                                                    </div>\r\n                                                </ng-container>\r\n                                            </div>\r\n                                            <small class=\"labeling-block-row-column-body-item-box-input-description\" *ngIf=\"item.description && item.inputType !== 'text_list'\">\r\n                                                {{item.description}}\r\n                                            </small>\r\n                                        </div>\r\n                                        <!--                        <div class=\"labeling-block-row-column-body-item-box-break-line\" *ngIf=\"item.break_line\"></div>-->\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"objErrMessage text-center\" *ngIf=\"objErrMessage\">\r\n                        {{objErrMessage}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n<!--    <div class=\"floating-template-button\"-->\r\n<!--         [ngClass]=\"{'floating-template-button-vertical': templateType === 2}\"-->\r\n<!--         (click)=\"changeTemplateType()\">-->\r\n<!--        <div class=\"lds-hourglass\"-->\r\n<!--             [title]=\"templateType === 1 ? 'vertical' : 'horizontal'\"-->\r\n<!--        [ngClass]=\"{'animate': changeTemplateAnimation}\"></div>-->\r\n<!--    </div>-->\r\n  <div class=\"menu\" [ngClass]=\"{'menu-hover-animate': animateMenu}\">\r\n    <div class=\"inner-menu\">\r\n      <i class=\"d-icon-sync\" title=\"change template\" (click)=\"changeTemplateType()\" [ngClass]=\"{'d-icon-animate': changeTemplateAnimation}\"></i>\r\n<!--      <i class=\"d-icon-reset\" [ngClass]=\"{'d-icon-animate': false}\"></i>-->\r\n      <i class=\"d-icon-expend\" title=\"full screen\" (click)=\"expand()\" [ngClass]=\"{'d-icon-animate': false}\"><span class=\"line\"></span></i>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { DynamicLabelingRoomComponent } from './dynamic-labeling-room.component';\nimport {SafePipe} from './safe.pipe';\nimport {HttpClientModule} from '@angular/common/http';\n\n\n\n@NgModule({\n    declarations: [\n        DynamicLabelingRoomComponent,\n        SafePipe\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        HttpClientModule\n    ],\n    exports: [\n        DynamicLabelingRoomComponent\n    ]\n})\nexport class DynamicLabelingRoomModule { }\n","/*\n * Public API Surface of dynamic-labeling-room\n */\n\nexport * from './lib/dynamic-labeling-room.service';\nexport * from './lib/dynamic-labeling-room.component';\nexport * from './lib/dynamic-labeling-room.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, EventEmitter, Component, ViewEncapsulation, Inject, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nclass DynamicLabelingRoomService {\r\n    constructor() { }\r\n}\r\nDynamicLabelingRoomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nDynamicLabelingRoomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass SafePipe {\r\n    constructor(sanitizer) {\r\n        this.sanitizer = sanitizer;\r\n    }\r\n    transform(url) {\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n    }\r\n}\r\nSafePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\r\nSafePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, name: \"safe\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{ name: 'safe' }]\r\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass DynamicLabelingRoomComponent {\r\n    constructor(document) {\r\n        this.formSubmitted = false;\r\n        this.dragStarted = false;\r\n        this.resetViewAnimate = false;\r\n        this.animateMenu = false;\r\n        this.changeTemplateAnimation = false;\r\n        this.verticalDrag = {\r\n            version: 1,\r\n            // all numbers are percent values\r\n            view: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 50,\r\n                right: 0,\r\n                left: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'top',\r\n                    top: false,\r\n                    bottom: 'bottom',\r\n                    left: false,\r\n                    right: false,\r\n                }\r\n            },\r\n            labeling: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 50,\r\n                bottom: 0,\r\n                right: 0,\r\n                left: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'bottom',\r\n                    top: 'top',\r\n                    bottom: false,\r\n                    left: false,\r\n                    right: false,\r\n                }\r\n            },\r\n            minTop: 0,\r\n            maxTop: 100,\r\n            minLeft: 0,\r\n            maxLeft: 100\r\n        };\r\n        this.horizontalDrag = {\r\n            version: 2,\r\n            // all numbers are percent values\r\n            view: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                left: 50,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'right',\r\n                    top: false,\r\n                    bottom: false,\r\n                    left: 'left',\r\n                    right: false,\r\n                }\r\n            },\r\n            labeling: {\r\n                mousedown: false,\r\n                height: '',\r\n                top: 0,\r\n                bottom: 0,\r\n                right: 50,\r\n                left: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                startPos: null,\r\n                type: null,\r\n                onMove: {\r\n                    currentPos: 'left',\r\n                    top: false,\r\n                    bottom: false,\r\n                    left: false,\r\n                    right: 'right',\r\n                }\r\n            },\r\n            minTop: 0,\r\n            maxTop: 100,\r\n            minLeft: 0,\r\n            maxLeft: 100\r\n        };\r\n        this.expandDetails = {\r\n            expended: false,\r\n            parent: {},\r\n            original: {},\r\n            css: {\r\n                top: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n            }\r\n        };\r\n        this.iframeLoading = false;\r\n        this.mainList = [];\r\n        this.listCurrentIndex = 0;\r\n        this.templateType = 1;\r\n        this.data = {\r\n            // text: 'signature',\r\n            // url: 'https://polkadotmama.org/board-of-directors/',\r\n            // // url: 'https://www.apple.com/leadership/',\r\n            // showInIframe: true\r\n            text: '',\r\n            url: '',\r\n            showInIframe: false\r\n        };\r\n        this.obj = [\r\n        // {\r\n        //     blockName: '',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'not_a_signature', inputType: 'checkbox'},\r\n        //         {label: 'non_english_text', inputType: 'checkbox'},\r\n        //         {label: 'other', inputType: 'checkbox', value: 0},\r\n        //         {label: 'reason', inputType: 'text', depend: 'other', dependOnValue: 1}\r\n        //     ],\r\n        // },\r\n        // {\r\n        //     blockName: 'name',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'first_name', inputType: 'text', breakLine: true, center: true},\r\n        //         {label: 'last_name', inputType: 'text', fullLine: true},\r\n        //         {label: 'prefix', inputType: 'text', center: true},\r\n        //     ],\r\n        // },\r\n        // {\r\n        //     blockName: 'connections',\r\n        //     numColumns: 2,\r\n        //     fields: [\r\n        //         {label: 'phones', inputType: 'text_list'},\r\n        //         {label: 'faxes', inputType: 'text_list'},\r\n        //         {label: 'comments', inputType: 'textarea'},\r\n        //         {label: 'other', inputType: 'checkbox', value: 0},\r\n        //         {label: 'type', inputType: 'select', options: ['one', 'two', 'three'], depend: 'other'}\r\n        //     ],\r\n        // }\r\n        ];\r\n        this.onChange = new EventEmitter();\r\n        this.objErrMessage = '';\r\n        this.document = document;\r\n    }\r\n    listenToIframeLoad() {\r\n        if (this.iframe) {\r\n            this.iframeLoading = true;\r\n            const iframe = this.iframe.nativeElement;\r\n            iframe.onload = () => {\r\n                this.iframeLoading = false;\r\n            };\r\n        }\r\n    }\r\n    initObj() {\r\n        this.resetObjError();\r\n        this.mainList = [];\r\n        this.listCurrentIndex = 0;\r\n        const mainObj = this.handleInitObjIsList();\r\n        if (!this.obj || !this.obj.length) {\r\n            this.setObjError('obj have no items - please make sure obj has at least one DsProjectRoomBlock item');\r\n            return;\r\n        }\r\n        if (this.obj.length && !this.obj[0].fields) {\r\n            this.setObjError('obj have no structure - please make sure obj has at least one DsProjectRoomBlock item');\r\n            return;\r\n        }\r\n        for (const i in this.obj) {\r\n            for (const j in this.obj[i].fields) {\r\n                if (this.obj[i].fields[j].inputType === 'checkbox') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = 0;\r\n                    }\r\n                }\r\n                else if (this.obj[i].fields[j].inputType === 'text') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = '';\r\n                    }\r\n                }\r\n                else if (this.obj[i].fields[j].inputType === 'text_list') {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = [];\r\n                    }\r\n                }\r\n                else {\r\n                    if (!this.obj[i].fields[j].value) {\r\n                        this.obj[i].fields[j].value = '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.data && this.data.isList) {\r\n            this.setUpListObj();\r\n            this.addToMainList(this.listObj);\r\n            this.cleanListObj();\r\n            this.addToListInitObj(mainObj);\r\n        }\r\n    }\r\n    handleInitObjIsList() {\r\n        let returnObj = [];\r\n        const mainObj = this.obj;\r\n        if (mainObj.length && mainObj[0].length) {\r\n            this.obj = mainObj[0];\r\n            mainObj.shift();\r\n            returnObj = mainObj;\r\n        }\r\n        return returnObj;\r\n    }\r\n    addToListInitObj(mainObj) {\r\n        if (mainObj && mainObj.length) {\r\n            for (const o of mainObj) {\r\n                this.addToMainList(o);\r\n            }\r\n            this.listCurrentIndex = 0;\r\n            this.obj = this.mainList[this.listCurrentIndex];\r\n        }\r\n    }\r\n    setUpListObj() {\r\n        this.listObj = JSON.parse(JSON.stringify(this.obj));\r\n    }\r\n    cleanListObj() {\r\n        for (const i in this.listObj) {\r\n            for (const j in this.listObj[i].fields) {\r\n                if (this.listObj[i].fields[j].inputType === 'checkbox') {\r\n                    this.listObj[i].fields[j].value = 0;\r\n                }\r\n                else if (this.listObj[i].fields[j].inputType === 'text') {\r\n                    this.listObj[i].fields[j].value = '';\r\n                }\r\n                else if (this.listObj[i].fields[j].inputType === 'text_list') {\r\n                    this.listObj[i].fields[j].value = [];\r\n                }\r\n                else {\r\n                    this.listObj[i].fields[j].value = '';\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.resetDrag();\r\n        setTimeout(() => {\r\n            this.firstAnimateMenu();\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.listenToIframeLoad();\r\n        });\r\n    }\r\n    checkDepend(fields, item) {\r\n        if (!item.depend) {\r\n            return false;\r\n        }\r\n        const map = fields.map((o) => o.label);\r\n        const index = map.indexOf(item.depend);\r\n        let condition = fields[index].value;\r\n        if (item.dependOnValue) {\r\n            condition = fields[index].value === item.dependOnValue;\r\n        }\r\n        if (index > -1 && condition) {\r\n            return false;\r\n        }\r\n        else {\r\n            if (item.value) {\r\n                setTimeout(() => {\r\n                    item.value = '';\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    addToMainList(listObj) {\r\n        const obj = JSON.parse(JSON.stringify(listObj));\r\n        this.mainList.push(obj);\r\n        this.listCurrentIndex = this.mainList.length - 1;\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n        this.formSubmitted = false;\r\n        // console.log('this.mainList', this.mainList);\r\n    }\r\n    addToMainListIfFormIsValid() {\r\n        if (this.form && !(this.formSubmitted && this.form.invalid)) {\r\n            this.formSubmitted = false;\r\n            this.addToMainList(this.listObj);\r\n        }\r\n        else {\r\n            alert('please fill all required data before adding ' + this.data.listHeader);\r\n        }\r\n    }\r\n    removeFromMainList(index) {\r\n        this.mainList.splice(index, 1);\r\n        // console.log('this.listCurrentIndex', this.listCurrentIndex)\r\n        // console.log('index', index)\r\n        if (this.listCurrentIndex > 0) {\r\n            this.listCurrentIndex--;\r\n        }\r\n        else {\r\n            this.listCurrentIndex = 0;\r\n        }\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n    }\r\n    selectMainItem(index) {\r\n        this.listCurrentIndex = index;\r\n        console.log('this.mainList[this.listCurrentIndex]', this.mainList[this.listCurrentIndex]);\r\n        this.obj = this.mainList[this.listCurrentIndex];\r\n    }\r\n    getMainObjHeader(index) {\r\n        let header = (this.data.listItemDefaultHeader ? this.data.listItemDefaultHeader + ' ' : 'Item ') + (index + 1);\r\n        try {\r\n            let firstLabelValue = '';\r\n            let secondLabelValue = '';\r\n            if (this.data.listFirstItemIndex >= 0\r\n                && this.mainList[index]\r\n                && this.mainList[index][this.data.listObjIndex]\r\n                && this.mainList[index][this.data.listObjIndex].fields\r\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex]) {\r\n                firstLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex].value;\r\n            }\r\n            if (this.data.listSecondItemIndex >= 0\r\n                && this.mainList[index]\r\n                && this.mainList[index][this.data.listObjIndex]\r\n                && this.mainList[index][this.data.listObjIndex].fields\r\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex]) {\r\n                secondLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex].value;\r\n            }\r\n            if (firstLabelValue || secondLabelValue) {\r\n                if (secondLabelValue) {\r\n                    firstLabelValue += ' ';\r\n                }\r\n                header = firstLabelValue + secondLabelValue;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n        return header;\r\n    }\r\n    appendItemToList(item) {\r\n        let val = '';\r\n        if (item.listObj) {\r\n            val = this.cloneObject(item.listObj);\r\n        }\r\n        item.value.push(val);\r\n    }\r\n    removeItemToList(item, index) {\r\n        item.value.splice(index, 1);\r\n    }\r\n    cloneObject(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n    isArray(arr) {\r\n        return Array.isArray(arr);\r\n    }\r\n    trackByFn(index, item) {\r\n        return index;\r\n    }\r\n    originalObjectOrder(a, b) {\r\n        return 0;\r\n    }\r\n    preetyLabel(label) {\r\n        if (!label) {\r\n            return;\r\n        }\r\n        const str = label.replace(/_/g, ' ').replace(/-/g, ' ');\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    onMouseDown(e, name, type) {\r\n        const pos = this.getPointerPos(e, false);\r\n        this.currentDrag[name].mousedown = true;\r\n        this.currentDrag[name].startPos = pos;\r\n        this.currentDrag[name].type = type;\r\n        this.dragStarted = true;\r\n        this.document.body.classList.add('disable-mobile-refresh');\r\n    }\r\n    onMouseUp(e) {\r\n        if (this.currentDrag.view.mousedown) {\r\n            this.currentDrag.view.mousedown = false;\r\n            this.currentDrag.view.startPos = null;\r\n        }\r\n        if (this.currentDrag.labeling.mousedown) {\r\n            this.currentDrag.labeling.mousedown = false;\r\n            this.currentDrag.labeling.startPos = null;\r\n        }\r\n        this.dragStarted = false;\r\n        this.document.body.classList.remove('disable-mobile-refresh');\r\n    }\r\n    onMouseMove(e) {\r\n        if (this.dragStarted) {\r\n            let type = '';\r\n            if (this.currentDrag.view.mousedown) {\r\n                type = 'view';\r\n            }\r\n            if (this.currentDrag.labeling.mousedown) {\r\n                type = 'labeling';\r\n            }\r\n            if (!type) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const pos = this.getPointerPos(e, false);\r\n            const moveX = pos.x - this.currentDrag[type].startPos.x;\r\n            const moveY = pos.y - this.currentDrag[type].startPos.y;\r\n            const moveXPercent = moveX / this.dynamicLabelingRoom.nativeElement.clientWidth * 100;\r\n            const moveYPercent = moveY / this.dynamicLabelingRoom.nativeElement.clientHeight * 100;\r\n            // if (this.currentDrag[type].onMove.currentPos === 'top') {\r\n            //     moveYPercent = -moveYPercent;\r\n            // }\r\n            if (this.currentDrag.version === 1) {\r\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\r\n            }\r\n            else if (this.currentDrag.version === 2) {\r\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\r\n            }\r\n            else if (this.currentDrag.version === 3) {\r\n                // this.onMoveVersion3(type, moveXPercent, moveYPercent);\r\n            }\r\n            this.onMoveLimitTopBottom();\r\n            this.onMoveLimitLeft();\r\n            this.onMoveLimitRight();\r\n            // if (this.currentDrag.labeling.height < 0) {\r\n            //     this.currentDrag.datasets.height = 0;\r\n            //     this.currentDrag.serviceResults.top = this.currentDrag.minTop;\r\n            //     this.currentDrag.view.top = this.currentDrag.minTop;\r\n            // }\r\n            // if (this.currentDrag.datasets.height > this.currentDrag.maxTop) {\r\n            //     this.currentDrag.datasets.height = this.currentDrag.maxTop;\r\n            //     this.currentDrag.serviceResults.top = 100;\r\n            //     this.currentDrag.view.top = 100;\r\n            // }\r\n            // if (this.currentDrag.serviceResults.left < this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft) {\r\n            //     this.currentDrag.serviceResults.left = this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft;\r\n            //     this.currentDrag.view.right = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\r\n            // }\r\n            // if (this.currentDrag.serviceResults.left > this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft) {\r\n            //     this.currentDrag.serviceResults.left = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\r\n            //     this.currentDrag.view.right = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\r\n            // }\r\n            this.currentDrag[type].startPos = pos;\r\n        }\r\n    }\r\n    /**\r\n     * Get the pointer position\r\n     * param {any} e (event)\r\n     * param {any} preventTouch\r\n     * return {Object} { x: , y: }\r\n     */\r\n    getPointerPos(e, preventTouch) {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (e.clientX !== undefined && e.clientY !== undefined) {\r\n            x = e.clientX;\r\n            y = e.clientY;\r\n        }\r\n        else if (e.taretTouches) {\r\n            if (preventTouch) {\r\n                e.preventDefault();\r\n            }\r\n            x = e.taretTouches[0].clientX;\r\n            y = e.taretTouches[0].clientY;\r\n        }\r\n        else if (e.touches) {\r\n            if (preventTouch) {\r\n                e.preventDefault();\r\n            }\r\n            x = e.touches[0].clientX;\r\n            y = e.touches[0].clientY;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        };\r\n    }\r\n    onMoveLimitTopBottom() {\r\n        if (this.currentDrag.labeling.onMove.top) {\r\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.top]);\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] < 0) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = 0;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] > this.currentDrag.maxTop) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.labeling.onMove.bottom) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] < 0) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = 0;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] > this.currentDrag.maxTop) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.top) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] < 0) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = 0;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] > this.currentDrag.maxTop) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.bottom) {\r\n            // console.log(this.currentDrag.view[this.currentDrag.view.onMove.bottom]);\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] < 0) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = 0;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] > this.currentDrag.maxTop) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = this.currentDrag.maxTop;\r\n            }\r\n        }\r\n    }\r\n    onMoveLimitLeft() {\r\n        if (this.currentDrag.labeling.onMove.left) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] < this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.left) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] < this.currentDrag.minLeft - this.currentDrag.view.marginLeft) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.minLeft - this.currentDrag.view.marginLeft;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.view.marginLeft) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.view.marginLeft;\r\n            }\r\n        }\r\n    }\r\n    onMoveLimitRight() {\r\n        if (this.currentDrag.labeling.onMove.right) {\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight;\r\n            }\r\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] < this.currentDrag.minLeft - this.currentDrag.labeling.marginRight) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.minLeft - this.currentDrag.labeling.marginRight;\r\n            }\r\n        }\r\n        if (this.currentDrag.view.onMove.right) {\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.view.marginRight) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.view.marginRight;\r\n            }\r\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] < this.currentDrag.minLeft - this.currentDrag.view.marginRight) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\r\n            }\r\n        }\r\n    }\r\n    onMoveVersion1(type, moveXPercent, moveYPercent) {\r\n        if (this.currentDrag[type].type.indexOf('bottom') > -1) {\r\n            if (this.currentDrag.labeling.onMove.top) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] += moveYPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.bottom) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] -= moveYPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.top) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.top] += moveYPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.bottom) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] -= moveYPercent;\r\n            }\r\n        }\r\n        if (this.currentDrag[type].type.indexOf('left') > -1) {\r\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.left])\r\n            // this.currentDrag.serviceResults.left += moveXPercent;\r\n            // this.currentDrag.view.right -= moveXPercent;\r\n            if (this.currentDrag.labeling.onMove.left) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.right) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.left) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.right) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\r\n            }\r\n        }\r\n        else if (this.currentDrag[type].type.indexOf('right') > -1) {\r\n            // this.currentDrag.serviceResults.left += moveXPercent;\r\n            // this.currentDrag.view.right -= moveXPercent;\r\n            if (this.currentDrag.labeling.onMove.left) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.labeling.onMove.right) {\r\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.left) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\r\n            }\r\n            if (this.currentDrag.view.onMove.right) {\r\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\r\n            }\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.obj) {\r\n            this.initObj();\r\n            this.onChangeObj();\r\n        }\r\n        if (changes.data && !changes.data.firstChange) {\r\n            setTimeout(() => {\r\n                this.listenToIframeLoad();\r\n            });\r\n        }\r\n        if (changes.templateType && !changes.templateType.firstChange) {\r\n            this.resetView();\r\n            this.animateChangingTemplate();\r\n        }\r\n    }\r\n    resetDrag() {\r\n        if (this.templateType === 1) {\r\n            this.currentDrag = JSON.parse(JSON.stringify(this.verticalDrag));\r\n        }\r\n        else {\r\n            this.currentDrag = JSON.parse(JSON.stringify(this.horizontalDrag));\r\n        }\r\n    }\r\n    resetView() {\r\n        this.resetViewAnimate = true;\r\n        this.resetDrag();\r\n        setTimeout(() => {\r\n            this.resetViewAnimate = false;\r\n        }, 300);\r\n    }\r\n    changeTemplateType() {\r\n        if (this.templateType === 1) {\r\n            this.templateType = 2;\r\n        }\r\n        else {\r\n            this.templateType = 1;\r\n        }\r\n        this.resetView();\r\n        this.animateChangingTemplate();\r\n    }\r\n    animateChangingTemplate() {\r\n        clearTimeout(this.changeTemplateAnimationTimeout);\r\n        this.changeTemplateAnimation = true;\r\n        this.changeTemplateAnimationTimeout = setTimeout(() => {\r\n            this.changeTemplateAnimation = false;\r\n        }, 1000);\r\n    }\r\n    onChangeObj() {\r\n        if (this.form) {\r\n            this.mainList[this.listCurrentIndex].isValid = !this.form.invalid;\r\n            this.formSubmitted = true;\r\n            this.form.onSubmit(undefined);\r\n            if (this.data && this.data.isList) {\r\n                const isValid = this.checkValidList();\r\n                const map = this.mainList.map((o) => this.getFinalObject(o));\r\n                const obj = {\r\n                    obj: this.mainList,\r\n                    valid: isValid,\r\n                    cleanBlocks: map,\r\n                };\r\n                this.onChange.emit(obj);\r\n            }\r\n            else {\r\n                const obj = {\r\n                    obj: this.obj,\r\n                    valid: !this.form.invalid,\r\n                    cleanBlocks: this.getFinalObject(this.obj)\r\n                };\r\n                this.onChange.emit(obj);\r\n            }\r\n        }\r\n    }\r\n    getFinalObject(currrentObj) {\r\n        const cleanBlocks = [];\r\n        for (const block of currrentObj) {\r\n            const obj = {\r\n                blockName: block.blockName, fields: []\r\n            };\r\n            for (const field of block.fields) {\r\n                const val = field.value === undefined ?\r\n                    (field.inputType === 'checkbox' ? 0 :\r\n                        (field.inputType === 'text_list' ? [] : '')) : field.value;\r\n                if (field.value.length) {\r\n                    obj.fields.push({\r\n                        label: field.label, value: field.value\r\n                    });\r\n                }\r\n            }\r\n            cleanBlocks.push(obj);\r\n        }\r\n        return cleanBlocks;\r\n    }\r\n    checkValidList() {\r\n        const cleanBlocks = [];\r\n        let valid = true;\r\n        for (const currentObj of this.mainList) {\r\n            for (const block of currentObj) {\r\n                for (const field of block.fields) {\r\n                    if (!field.value && field.required) {\r\n                        valid = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n    getObjKeysLength(listObj) {\r\n        return Object.keys(listObj).length;\r\n    }\r\n    firstAnimateMenu() {\r\n        clearTimeout(this.animateMenuTimeout);\r\n        this.animateMenu = true;\r\n        this.animateMenuTimeout = setTimeout(() => {\r\n            this.animateMenu = false;\r\n        }, 300 * 4);\r\n    }\r\n    expand() {\r\n        const el = this.dynamicLabelingRoom.nativeElement;\r\n        const rect = el.getBoundingClientRect();\r\n        const animation = 500;\r\n        if (!this.expandDetails.expended) {\r\n            const parent = el.parentElement;\r\n            this.expandDetails.parent = parent;\r\n            this.expandDetails.original = rect;\r\n            el.style.position = 'fixed';\r\n            el.style.background = '#fff';\r\n            el.style.zIndex = '9999';\r\n            el.style.top = rect.top + 'px';\r\n            el.style.left = rect.left + 'px';\r\n            el.style.width = rect.width + 'px';\r\n            el.style.height = rect.height + 'px';\r\n            requestAnimationFrame(() => {\r\n                el.style.transition = 'all ' + animation + 'ms ease-in-out';\r\n                el.style.top = '0';\r\n                el.style.left = '0';\r\n                el.style.width = '100%';\r\n                el.style.height = '100%';\r\n                this.expandDetails.expended = true;\r\n            });\r\n        }\r\n        else {\r\n            requestAnimationFrame(() => {\r\n                el.style.top = this.expandDetails.original.top + 'px';\r\n                el.style.left = this.expandDetails.original.left + 'px';\r\n                el.style.width = this.expandDetails.original.width + 'px';\r\n                el.style.height = this.expandDetails.original.height + 'px';\r\n                setTimeout(() => {\r\n                    el.style.transition = '';\r\n                    el.style.position = '';\r\n                    el.style.background = '';\r\n                    el.style.zIndex = '';\r\n                    el.style.top = '';\r\n                    el.style.left = '';\r\n                    el.style.width = '';\r\n                    el.style.height = '';\r\n                    this.expandDetails.expended = false;\r\n                }, animation);\r\n            });\r\n        }\r\n        // el.animate([\r\n        //     {top: '0'},\r\n        //     {left: '0'},\r\n        //     {width: '100%'},\r\n        //     {height: '100%'},\r\n        // ], {\r\n        //   duration: 1500,\r\n        //   fill: 'forwards',\r\n        // });\r\n        // let transform = 'translateY(-' + rect.top + 'px)';\r\n        // transform += ' translateX(-' + rect.left + 'px)';\r\n        // transform += ' translateX(-' + rect.left + 'px)';\r\n        // el.animate([\r\n        //   // keyframes\r\n        //   { transform: 'translateY(-' + rect.top + 'px)' + ' translateX(-' + rect.left + 'px)' }\r\n        // ], {\r\n        //   // timing options\r\n        //   duration: 1000,\r\n        //   easing: 'ease-in-out',\r\n        //   fill: 'forwards',\r\n        // });\r\n    }\r\n    setObjError(err) {\r\n        this.objErrMessage = err;\r\n    }\r\n    resetObjError() {\r\n        this.objErrMessage = '';\r\n    }\r\n}\r\nDynamicLabelingRoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomComponent, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });\r\nDynamicLabelingRoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DynamicLabelingRoomComponent, selector: \"lib-dynamic-labeling-room\", inputs: { mainCssObj: \"mainCssObj\", viewCssObj: \"viewCssObj\", formCssObj: \"formCssObj\", templateType: \"templateType\", data: \"data\", obj: \"obj\" }, outputs: { onChange: \"onChange\" }, host: { listeners: { \"document:mouseup\": \"onMouseUp($event)\", \"document:touchend\": \"onMouseUp($event)\", \"document:mousemove\": \"onMouseMove($event)\", \"document:touchmove\": \"onMouseMove($event)\" } }, viewQueries: [{ propertyName: \"dynamicLabelingRoom\", first: true, predicate: [\"dynamic_labeling_room\"], descendants: true }, { propertyName: \"iframe\", first: true, predicate: [\"iframe\"], descendants: true }, { propertyName: \"form\", first: true, predicate: [\"form\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"dynamic-labeling-room\\\" #dynamic_labeling_room\\r\\n     *ngIf=\\\"data && obj\\\"\\r\\n     [ngStyle]=\\\"mainCssObj\\\">\\r\\n    <div class=\\\"view\\\"\\r\\n         [ngClass]=\\\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\\\"\\r\\n         [ngStyle]=\\\"{\\r\\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\\r\\n            'top': currentDrag.view.top + '%',\\r\\n            'bottom': currentDrag.view.bottom + '%',\\r\\n            'left': currentDrag.view.left + '%',\\r\\n            'right': currentDrag.view.right + '%'\\r\\n            }\\\">\\r\\n        <div class=\\\"view-text\\\"\\r\\n             [style]=\\\"!data.url ? viewCssObj : ''\\\"\\r\\n             *ngIf=\\\"!data.url && data.text\\\">{{data.text}}</div>\\r\\n        <!--        <div *ngIf=\\\"show.url\\\"><a [href]=\\\"show.url\\\" target=\\\"_blank\\\">{{show.url}}</a></div>-->\\r\\n        <div class=\\\"iframe-wrapper\\\" *ngIf=\\\"data.url\\\">\\r\\n            <ng-container *ngIf=\\\"data.showInIframe\\\">\\r\\n                <div class=\\\"iframe-loader-wrapper\\\" *ngIf=\\\"iframeLoading\\\">\\r\\n                    <div class=\\\"iframe-loader\\\"><div></div><div></div><div></div><div></div></div>\\r\\n                </div>\\r\\n                <iframe [ngClass]=\\\"{'dragging': dragStarted}\\\" #iframe [src]=\\\"data.url | safe\\\"></iframe>\\r\\n            </ng-container>\\r\\n            <ng-container *ngIf=\\\"!data.showInIframe\\\">\\r\\n                <a [href]=\\\"data.url\\\" target=\\\"_blank\\\">{{data.url}}</a>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n        <div class=\\\"horizontal-drag horizontal-drag-bottom\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.bottom\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"></div>\\r\\n        <div class=\\\"vertical-drag vertical-drag-right\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.left\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'left, right')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'left, right')\\\"></div>\\r\\n    </div>\\r\\n    <form #form=\\\"ngForm\\\">\\r\\n        <div class=\\\"labeling\\\"\\r\\n             [ngClass]=\\\"{'animated-all': resetViewAnimate}\\\"\\r\\n             [ngStyle]=\\\"{\\r\\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\\r\\n                'top': currentDrag.labeling.top + '%',\\r\\n                'bottom': currentDrag.labeling.bottom + '%',\\r\\n                'left': currentDrag.labeling.left + '%',\\r\\n                'right': currentDrag.labeling.right + '%'\\r\\n                }\\\">\\r\\n            <div class=\\\"horizontal-drag horizontal-drag-top\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.top\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"></div>\\r\\n            <div class=\\\"vertical-drag vertical-drag-left\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.right\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"></div>\\r\\n            <div class=\\\"labeling-overflow\\\"\\r\\n                 [style]=\\\"formCssObj\\\">\\r\\n                <div class=\\\"labeling-header\\\" *ngIf=\\\"data.isList\\\" [ngClass]=\\\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    {{data.listHeader}} <span class=\\\"labeling-header-plus no-highlight\\\"\\r\\n                                              (click)=\\\"addToMainList(listObj)\\\">+</span>\\r\\n                    <br>\\r\\n                    <div class=\\\"labeling-header-item no-highlight\\\" *ngFor=\\\"let item of mainList; let i = index\\\"\\r\\n                         (click)=\\\"selectMainItem(i)\\\"\\r\\n                         [ngClass]=\\\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\\\">\\r\\n                        {{getMainObjHeader(i)}} <span *ngIf=\\\"mainList.length > 1\\\" class=\\\"labeling-header-item-minus no-highlight\\\" (click)=\\\"removeFromMainList(i)\\\">x</span>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div [ngClass]=\\\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    <div class=\\\"labeling-block\\\" *ngFor=\\\"let block of obj\\\">\\r\\n                        <div class=\\\"labeling-block-row\\\">\\r\\n                            <div class=\\\"labeling-block-row-column\\\">\\r\\n                                <div class=\\\"labeling-block-row-column-header\\\">\\r\\n                                    {{preetyLabel(block.blockName)}}\\r\\n                                    <div class=\\\"labeling-block-row-column-header-description\\\">\\r\\n                                        {{block.blockDesc}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"labeling-block-row-column-body\\\">\\r\\n                                    <div class=\\\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\\r\\n                                labeling-block-row-column-body-item-{{item.inputType}}\\\"\\r\\n                                         *ngFor=\\\"let item of block.fields\\\"\\r\\n                                         [ngStyle]=\\\"{\\r\\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\\r\\n                                    'max-width': (10/block.numColumns*10) + '%'\\r\\n                                   }\\\"\\r\\n                                         [ngClass]=\\\"{\\r\\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\\r\\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\\r\\n                                 'labeling-block-row-column-body-item-box-center': item.center\\r\\n                                 }\\\">\\r\\n                                        <div class=\\\"labeling-block-row-column-body-item-box\\\">\\r\\n                                            <div class=\\\"labeling-block-row-column-body-item-box-input\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [pattern]=\\\"item.pattern\\\"\\r\\n                                                       [(ngModel)]=\\\"item.value\\\"\\r\\n                                                       (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                       [attr.value]=\\\"item.value\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\\r\\n                                                       }\\\"\\r\\n                                                       [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'checkbox'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngModel]=\\\"item.value\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\"\\r\\n                                                       (change)=\\\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\\\">\\r\\n                                                <textarea *ngIf=\\\"item.inputType === 'textarea'\\\"\\r\\n                                                          [ngStyle]=\\\"item.css\\\"\\r\\n                                                          [name]=\\\"item.label\\\"\\r\\n                                                          [required]=\\\"item.required\\\"\\r\\n                                                          [(ngModel)]=\\\"item.value\\\"\\r\\n                                                          (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                          [attr.value]=\\\"item.value\\\"\\r\\n                                                          [ngClass]=\\\"{\\r\\n                                                              'required': formSubmitted &&\\r\\n                                                              form.controls[item.label] &&\\r\\n                                                              form.controls[item.label].errors &&\\r\\n                                                              (form.controls[item.label].errors.required)\\r\\n                                                          }\\\"\\r\\n                                                          [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                </textarea>\\r\\n                                                <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select'\\\"\\r\\n                                                        [ngStyle]=\\\"item.css\\\"\\r\\n                                                        [name]=\\\"item.label\\\"\\r\\n                                                        [required]=\\\"item.required\\\"\\r\\n                                                        [(ngModel)]=\\\"item.value\\\"\\r\\n                                                        (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                        [disabled]=\\\"checkDepend(block.fields, item)\\\"\\r\\n                                                        [attr.value]=\\\"item.value\\\"\\r\\n                                                        [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\">\\r\\n                                                    <option value=\\\"\\\"></option>\\r\\n                                                    <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>\\r\\n                                                </select>\\r\\n    <!--                                            <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select_multiple'\\\"-->\\r\\n    <!--                                                    multiple-->\\r\\n    <!--                                                    [ngStyle]=\\\"item.css\\\"-->\\r\\n    <!--                                                    [name]=\\\"item.label\\\"-->\\r\\n    <!--                                                    [required]=\\\"item.required\\\"-->\\r\\n    <!--                                                    [(ngModel)]=\\\"item.value\\\"-->\\r\\n    <!--                                                    (ngModelChange)=\\\"onChangeObj()\\\"-->\\r\\n    <!--                                                    [disabled]=\\\"checkDepend(block.fields, item)\\\"-->\\r\\n    <!--                                                    [attr.value]=\\\"item.value\\\"-->\\r\\n    <!--                                                    [ngClass]=\\\"{-->\\r\\n    <!--                                                       'required': formSubmitted &&-->\\r\\n    <!--                                                       form.controls[item.label] &&-->\\r\\n    <!--                                                       form.controls[item.label].errors &&-->\\r\\n    <!--                                                       (form.controls[item.label].errors.required)-->\\r\\n    <!--                                                   }\\\">-->\\r\\n    <!--                                                <option value=\\\"\\\"></option>-->\\r\\n    <!--                                                <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>-->\\r\\n    <!--                                            </select>-->\\r\\n                                                <div class=\\\"labeling-block-row-column-body-item-box-input-label\\\"\\r\\n                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-label-hover':\\r\\n                                                     item.inputType === 'text' ||\\r\\n                                                     item.inputType === 'number' ||\\r\\n                                                     item.inputType === 'email' ||\\r\\n                                                     item.inputType === 'textarea' ||\\r\\n                                                     item.inputType === 'select_multiple' ||\\r\\n                                                     item.inputType === 'select'}\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-label-text\\\">\\r\\n                                                        {{preetyLabel(item.label)}}\\r\\n                                                        <span *ngIf=\\\"item.inputType === 'text_list'\\\" class=\\\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\\\"\\r\\n                                                              (click)=\\\"appendItemToList(item)\\\">+</span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                                <ng-container *ngIf=\\\"item.inputType === 'text_list' && isArray(item.value)\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description\\\">\\r\\n                                                        {{item.description}}\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item\\\" *ngFor=\\\"let listItem of item.value; index as i; trackBy: trackByFn\\\">\\r\\n                                                        <ng-container *ngIf=\\\"!item.listObj\\\">\\r\\n                                                            <input [type]=\\\"item.inputType\\\"\\r\\n                                                                   [name]=\\\"item.label + '-' + i\\\"\\r\\n                                                                   [required]=\\\"item.required\\\"\\r\\n                                                                   [(ngModel)]=\\\"item.value[i]\\\"\\r\\n                                                                   [ngClass]=\\\"{\\r\\n                                                                       'required': formSubmitted &&\\r\\n                                                                       form.controls[item.label + '-' + i] &&\\r\\n                                                                       form.controls[item.label + '-' + i].errors &&\\r\\n                                                                       (form.controls[item.label + '-' + i].errors.required)\\r\\n                                                                   }\\\"\\r\\n                                                                   (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\" (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n                                                        </ng-container>\\r\\n                                                        <ng-container *ngIf=\\\"item.listObj\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-wrapper\\\"\\r\\n                                                                 [ngStyle]=\\\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\\\"\\r\\n                                                                 *ngFor=\\\"let objItem of item.value[i]; index as j;let last = last;\\\">\\r\\n                                                                <input [type]=\\\"objItem.inputType\\\"\\r\\n                                                                       [name]=\\\"item.label + '-' + objItem.label + '-' + i + '-' + j\\\"\\r\\n                                                                       [required]=\\\"objItem.required\\\"\\r\\n                                                                       [(ngModel)]=\\\"objItem.value\\\"\\r\\n                                                                       [attr.value]=\\\"objItem.value\\\"\\r\\n                                                                       [ngClass]=\\\"{\\r\\n                                                                           'required': formSubmitted &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\\r\\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\\r\\n                                                                       }\\\"\\r\\n                                                                       (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label\\\"\\r\\n                                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\\\">\\r\\n                                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label-text\\\">\\r\\n                                                                        {{preetyLabel(objItem.label)}}\\r\\n                                                                    </div>\\r\\n                                                                </div>\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\"\\r\\n                                                                     *ngIf=\\\"last\\\"\\r\\n                                                                     (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n\\r\\n                                                            </div>\\r\\n                                                        </ng-container>\\r\\n                                                    </div>\\r\\n                                                </ng-container>\\r\\n                                            </div>\\r\\n                                            <small class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description && item.inputType !== 'text_list'\\\">\\r\\n                                                {{item.description}}\\r\\n                                            </small>\\r\\n                                        </div>\\r\\n                                        <!--                        <div class=\\\"labeling-block-row-column-body-item-box-break-line\\\" *ngIf=\\\"item.break_line\\\"></div>-->\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"objErrMessage text-center\\\" *ngIf=\\\"objErrMessage\\\">\\r\\n                        {{objErrMessage}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n<!--    <div class=\\\"floating-template-button\\\"-->\\r\\n<!--         [ngClass]=\\\"{'floating-template-button-vertical': templateType === 2}\\\"-->\\r\\n<!--         (click)=\\\"changeTemplateType()\\\">-->\\r\\n<!--        <div class=\\\"lds-hourglass\\\"-->\\r\\n<!--             [title]=\\\"templateType === 1 ? 'vertical' : 'horizontal'\\\"-->\\r\\n<!--        [ngClass]=\\\"{'animate': changeTemplateAnimation}\\\"></div>-->\\r\\n<!--    </div>-->\\r\\n  <div class=\\\"menu\\\" [ngClass]=\\\"{'menu-hover-animate': animateMenu}\\\">\\r\\n    <div class=\\\"inner-menu\\\">\\r\\n      <i class=\\\"d-icon-sync\\\" title=\\\"change template\\\" (click)=\\\"changeTemplateType()\\\" [ngClass]=\\\"{'d-icon-animate': changeTemplateAnimation}\\\"></i>\\r\\n<!--      <i class=\\\"d-icon-reset\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"></i>-->\\r\\n      <i class=\\\"d-icon-expend\\\" title=\\\"full screen\\\" (click)=\\\"expand()\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"><span class=\\\"line\\\"></span></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".dynamic-labeling-room{height:100%;font-size:14px;position:relative;overflow:hidden}.dynamic-labeling-room .labeling{position:absolute;top:50%;left:0;right:0;overflow:hidden;background:#fff;color:#28282c}.dynamic-labeling-room .labeling .labeling-overflow{overflow-y:auto;overflow-x:hidden;height:100%}.dynamic-labeling-room .labeling-block{position:relative}.dynamic-labeling-room .labeling-block-row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.dynamic-labeling-room .labeling-block-row-column{flex:0 0 100%;max-width:100%;-webkit-box-flex:0}.dynamic-labeling-room .labeling-block-row-column-header{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%;margin-bottom:2%;font-weight:600}.dynamic-labeling-room .labeling-block-row-column-header-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body{position:relative;display:flex;flex-wrap:wrap}.dynamic-labeling-room .labeling-block-row-column-body-item{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-box{position:relative;margin-bottom:1.3rem;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input{position:relative;overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea{min-height:40px}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select{position:relative;display:block;width:100%;height:calc(1.2em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#28282c;background:#fff;background-clip:padding-box;border:1px solid #ececf0;border-radius:2px;outline:none;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select:focus{border:1.5px solid #2271bf}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select.required{border:1.5px solid #f80000}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item{position:relative;margin-bottom:.5rem}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-minus{position:absolute;top:6.5px;right:3px;width:.7rem;cursor:pointer;color:red;font-size:1.3em;vertical-align:middle;line-height:1}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper{position:relative;display:inline-block;margin:1%;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-list-item-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-break-line{flex-basis:50%!important;max-width:100%!important;margin-right:.005%}.dynamic-labeling-room .labeling-block-row-column-body-item-box-full-line{flex-basis:100%!important;max-width:100%!important}.dynamic-labeling-room .labeling-block-row-column-body-item-box-center{margin:0 auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box{height:auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input checkbox-container{height:14px;width:14px;position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input input{height:14px;width:14px;display:inline-block;vertical-align:top;float:left;margin:3px 3px 3px 4px}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input-label{position:relative;display:inline-block;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-col{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%}.dynamic-labeling-room .labeling-block-fixed{position:relative}.dynamic-labeling-room .labeling-header{position:relative;margin:5px 0;font-weight:600}.dynamic-labeling-room .labeling-header-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-header-item{position:relative;line-height:1;padding:5px;box-shadow:0 0 5px #565555;background:#77f377;display:inline-block;border-radius:5px;cursor:pointer;margin:0 14px 9px 0}.dynamic-labeling-room .labeling-header-item-minus{position:absolute;top:0px;right:-5px;color:red;cursor:pointer;line-height:0;font-size:1em}.dynamic-labeling-room .labeling-header-item-selected{box-shadow:0 0 10px #000}.dynamic-labeling-room .labeling-header-item-invalid{color:#f80000}.dynamic-labeling-room .labeling-header-fixed{position:relative}.dynamic-labeling-room .view{position:absolute;top:0;left:0;right:0;overflow:hidden}.dynamic-labeling-room .view .view-text{position:absolute;top:0;right:0;left:0;bottom:0;overflow-y:auto;overflow-x:hidden;white-space:pre}.dynamic-labeling-room .view .iframe-wrapper{width:100%;height:100%;text-align:center}.dynamic-labeling-room .view .iframe-wrapper iframe{border:none;width:100%;height:100%}.dynamic-labeling-room .view .iframe-wrapper .dragging{pointer-events:none}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper{position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(255,255,255,.5)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader{position:absolute;width:35px;height:35px;top:50%;left:50%;transform:translate(-50%,-50%)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div{box-sizing:border-box;display:block;position:absolute;width:25px;height:25px;margin:5px;border:2px solid #fff;border-radius:50%;animation:iframe-loader 1.2s cubic-bezier(.5,0,.5,1) infinite;border-color:#ccc transparent transparent transparent}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(1){animation-delay:-.45s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(2){animation-delay:-.3s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(3){animation-delay:-.15s}@keyframes iframe-loader{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.dynamic-labeling-room .view-with-url{overflow:hidden}.dynamic-labeling-room .horizontal-drag{position:absolute;left:0;right:0;cursor:move;padding:5px 0;z-index:1;text-align:center}.dynamic-labeling-room .horizontal-drag-top{top:0;border-top:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-top:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #a2e0e1;position:absolute;top:-1px}.dynamic-labeling-room .horizontal-drag-bottom{bottom:0;border-bottom:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-bottom:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #a2e0e1;position:absolute;bottom:-1px}.dynamic-labeling-room .vertical-drag{position:absolute;top:0;bottom:0;cursor:move;padding:0 3px}.dynamic-labeling-room .vertical-drag-left{border-right:1px solid #a2e0e1;right:0}.dynamic-labeling-room .vertical-drag-left:after{content:\\\"\\\";border-top:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;right:-8px;transform:translateY(-50%) rotate(45deg)}.dynamic-labeling-room .vertical-drag-right{left:0;border-left:1px solid #a2e0e1}.dynamic-labeling-room .vertical-drag-right:after{content:\\\"\\\";border-top:8px solid transparent;border-left:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;left:-8px;transform:translateY(-50%) rotate(-45deg)}.dynamic-labeling-room .floating-template-button{position:absolute;top:5px;right:5px;z-index:2}.dynamic-labeling-room .floating-template-button .lds-hourglass{position:relative;width:20px;height:20px;cursor:pointer;z-index:1}.dynamic-labeling-room .floating-template-button .lds-hourglass:after{content:\\\" \\\";display:block;border-radius:50%;width:0;height:0;box-sizing:border-box;border:10px solid #79d6d7;border-color:#79d6d7 transparent #79d6d7 transparent}.dynamic-labeling-room .floating-template-button .lds-hourglass.animate:after{animation:lds-hourglass 1.2s infinite}@keyframes lds-hourglass{0%{transform:rotate(0);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{transform:rotate(900deg);animation-timing-function:cubic-bezier(.215,.61,.355,1)}to{transform:rotate(1800deg)}}.dynamic-labeling-room .menu{position:absolute;top:0;right:0;padding:5px;z-index:2;overflow:hidden}.dynamic-labeling-room .menu:before{content:\\\"\\\";position:absolute;top:0;right:0;transition:all .3s ease-in-out;border:solid 5px #79d6d7;border-left:solid 5px transparent;border-bottom:solid 5px transparent}.dynamic-labeling-room .menu .inner-menu{overflow:hidden;position:relative;transition:all .3s ease-in-out;right:-89px}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]{display:inline-block;vertical-align:middle;position:relative}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:before,.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:after{content:\\\"\\\";pointer-events:none}.dynamic-labeling-room .menu .inner-menu i{transition:all .2s}.dynamic-labeling-room .menu .inner-menu .d-icon-sync{width:20px;height:20px;border:2px solid;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:before{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(-45deg);right:-7px;top:0}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:after{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(135deg);left:-7px;bottom:0}.dynamic-labeling-room .menu .inner-menu .d-icon-expend{width:20px;height:20px;border:transparent solid 4px;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-expend .line{position:absolute;top:-3px;bottom:-3px;right:5px;transform:rotate(45deg);background:2px;border-width:.5px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:before{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);right:-7px;top:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:after{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);left:-7px;bottom:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-reset{width:20px;height:20px;border-width:2px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-reset:before{position:absolute;width:0;height:0;left:-7px;bottom:0;border-width:6px;border-style:solid;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;transform:rotate(135deg)}.dynamic-labeling-room .menu .inner-menu .d-icon-reset,.dynamic-labeling-room .menu .inner-menu .d-icon-sync,.dynamic-labeling-room .menu .inner-menu .d-icon-expend{border-radius:50%;margin:4px;border-left-color:transparent}.dynamic-labeling-room .menu .inner-menu .d-icon-reset.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-sync.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-expend.d-icon-animate{animation:lds-hourglass 1s infinite}.dynamic-labeling-room .menu:hover:before,.dynamic-labeling-room .menu-hover-animate:before{border-top-color:#004a4b;border-right-color:#004a4b}.dynamic-labeling-room .menu:hover .inner-menu,.dynamic-labeling-room .menu-hover-animate .inner-menu{right:0}.dynamic-labeling-room .text-center{text-align:center}.dynamic-labeling-room .objErrMessage{color:red}.no-highlight{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}body.disable-mobile-refresh{overscroll-behavior-y:contain}*,:after,:before{box-sizing:border-box}\\n\"], directives: [{ type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1$1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i2.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i2.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }], pipes: { \"safe\": SafePipe }, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-dynamic-labeling-room', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"dynamic-labeling-room\\\" #dynamic_labeling_room\\r\\n     *ngIf=\\\"data && obj\\\"\\r\\n     [ngStyle]=\\\"mainCssObj\\\">\\r\\n    <div class=\\\"view\\\"\\r\\n         [ngClass]=\\\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\\\"\\r\\n         [ngStyle]=\\\"{\\r\\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\\r\\n            'top': currentDrag.view.top + '%',\\r\\n            'bottom': currentDrag.view.bottom + '%',\\r\\n            'left': currentDrag.view.left + '%',\\r\\n            'right': currentDrag.view.right + '%'\\r\\n            }\\\">\\r\\n        <div class=\\\"view-text\\\"\\r\\n             [style]=\\\"!data.url ? viewCssObj : ''\\\"\\r\\n             *ngIf=\\\"!data.url && data.text\\\">{{data.text}}</div>\\r\\n        <!--        <div *ngIf=\\\"show.url\\\"><a [href]=\\\"show.url\\\" target=\\\"_blank\\\">{{show.url}}</a></div>-->\\r\\n        <div class=\\\"iframe-wrapper\\\" *ngIf=\\\"data.url\\\">\\r\\n            <ng-container *ngIf=\\\"data.showInIframe\\\">\\r\\n                <div class=\\\"iframe-loader-wrapper\\\" *ngIf=\\\"iframeLoading\\\">\\r\\n                    <div class=\\\"iframe-loader\\\"><div></div><div></div><div></div><div></div></div>\\r\\n                </div>\\r\\n                <iframe [ngClass]=\\\"{'dragging': dragStarted}\\\" #iframe [src]=\\\"data.url | safe\\\"></iframe>\\r\\n            </ng-container>\\r\\n            <ng-container *ngIf=\\\"!data.showInIframe\\\">\\r\\n                <a [href]=\\\"data.url\\\" target=\\\"_blank\\\">{{data.url}}</a>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n        <div class=\\\"horizontal-drag horizontal-drag-bottom\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.bottom\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'top, bottom')\\\"></div>\\r\\n        <div class=\\\"vertical-drag vertical-drag-right\\\"\\r\\n             *ngIf=\\\"currentDrag.view.onMove.left\\\"\\r\\n             (mousedown)=\\\"onMouseDown($event, 'view', 'left, right')\\\"\\r\\n             (touchstart)=\\\"onMouseDown($event, 'view', 'left, right')\\\"></div>\\r\\n    </div>\\r\\n    <form #form=\\\"ngForm\\\">\\r\\n        <div class=\\\"labeling\\\"\\r\\n             [ngClass]=\\\"{'animated-all': resetViewAnimate}\\\"\\r\\n             [ngStyle]=\\\"{\\r\\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\\r\\n                'top': currentDrag.labeling.top + '%',\\r\\n                'bottom': currentDrag.labeling.bottom + '%',\\r\\n                'left': currentDrag.labeling.left + '%',\\r\\n                'right': currentDrag.labeling.right + '%'\\r\\n                }\\\">\\r\\n            <div class=\\\"horizontal-drag horizontal-drag-top\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.top\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'top, bottom')\\\"></div>\\r\\n            <div class=\\\"vertical-drag vertical-drag-left\\\"\\r\\n                 *ngIf=\\\"currentDrag.labeling.onMove.right\\\"\\r\\n                 (mousedown)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"\\r\\n                 (touchstart)=\\\"onMouseDown($event, 'labeling', 'left, right')\\\"></div>\\r\\n            <div class=\\\"labeling-overflow\\\"\\r\\n                 [style]=\\\"formCssObj\\\">\\r\\n                <div class=\\\"labeling-header\\\" *ngIf=\\\"data.isList\\\" [ngClass]=\\\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    {{data.listHeader}} <span class=\\\"labeling-header-plus no-highlight\\\"\\r\\n                                              (click)=\\\"addToMainList(listObj)\\\">+</span>\\r\\n                    <br>\\r\\n                    <div class=\\\"labeling-header-item no-highlight\\\" *ngFor=\\\"let item of mainList; let i = index\\\"\\r\\n                         (click)=\\\"selectMainItem(i)\\\"\\r\\n                         [ngClass]=\\\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\\\">\\r\\n                        {{getMainObjHeader(i)}} <span *ngIf=\\\"mainList.length > 1\\\" class=\\\"labeling-header-item-minus no-highlight\\\" (click)=\\\"removeFromMainList(i)\\\">x</span>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div [ngClass]=\\\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\\\">\\r\\n                    <div class=\\\"labeling-block\\\" *ngFor=\\\"let block of obj\\\">\\r\\n                        <div class=\\\"labeling-block-row\\\">\\r\\n                            <div class=\\\"labeling-block-row-column\\\">\\r\\n                                <div class=\\\"labeling-block-row-column-header\\\">\\r\\n                                    {{preetyLabel(block.blockName)}}\\r\\n                                    <div class=\\\"labeling-block-row-column-header-description\\\">\\r\\n                                        {{block.blockDesc}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"labeling-block-row-column-body\\\">\\r\\n                                    <div class=\\\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\\r\\n                                labeling-block-row-column-body-item-{{item.inputType}}\\\"\\r\\n                                         *ngFor=\\\"let item of block.fields\\\"\\r\\n                                         [ngStyle]=\\\"{\\r\\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\\r\\n                                    'max-width': (10/block.numColumns*10) + '%'\\r\\n                                   }\\\"\\r\\n                                         [ngClass]=\\\"{\\r\\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\\r\\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\\r\\n                                 'labeling-block-row-column-body-item-box-center': item.center\\r\\n                                 }\\\">\\r\\n                                        <div class=\\\"labeling-block-row-column-body-item-box\\\">\\r\\n                                            <div class=\\\"labeling-block-row-column-body-item-box-input\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [pattern]=\\\"item.pattern\\\"\\r\\n                                                       [(ngModel)]=\\\"item.value\\\"\\r\\n                                                       (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                       [attr.value]=\\\"item.value\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\\r\\n                                                       }\\\"\\r\\n                                                       [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                <input *ngIf=\\\"item.inputType === 'checkbox'\\\"\\r\\n                                                       [type]=\\\"item.inputType\\\"\\r\\n                                                       [ngModel]=\\\"item.value\\\"\\r\\n                                                       [ngStyle]=\\\"item.css\\\"\\r\\n                                                       [name]=\\\"item.label\\\"\\r\\n                                                       [required]=\\\"item.required\\\"\\r\\n                                                       [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\"\\r\\n                                                       (change)=\\\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\\\">\\r\\n                                                <textarea *ngIf=\\\"item.inputType === 'textarea'\\\"\\r\\n                                                          [ngStyle]=\\\"item.css\\\"\\r\\n                                                          [name]=\\\"item.label\\\"\\r\\n                                                          [required]=\\\"item.required\\\"\\r\\n                                                          [(ngModel)]=\\\"item.value\\\"\\r\\n                                                          (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                          [attr.value]=\\\"item.value\\\"\\r\\n                                                          [ngClass]=\\\"{\\r\\n                                                              'required': formSubmitted &&\\r\\n                                                              form.controls[item.label] &&\\r\\n                                                              form.controls[item.label].errors &&\\r\\n                                                              (form.controls[item.label].errors.required)\\r\\n                                                          }\\\"\\r\\n                                                          [disabled]=\\\"checkDepend(block.fields, item)\\\">\\r\\n                                                </textarea>\\r\\n                                                <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select'\\\"\\r\\n                                                        [ngStyle]=\\\"item.css\\\"\\r\\n                                                        [name]=\\\"item.label\\\"\\r\\n                                                        [required]=\\\"item.required\\\"\\r\\n                                                        [(ngModel)]=\\\"item.value\\\"\\r\\n                                                        (ngModelChange)=\\\"onChangeObj()\\\"\\r\\n                                                        [disabled]=\\\"checkDepend(block.fields, item)\\\"\\r\\n                                                        [attr.value]=\\\"item.value\\\"\\r\\n                                                        [ngClass]=\\\"{\\r\\n                                                           'required': formSubmitted &&\\r\\n                                                           form.controls[item.label] &&\\r\\n                                                           form.controls[item.label].errors &&\\r\\n                                                           (form.controls[item.label].errors.required)\\r\\n                                                       }\\\">\\r\\n                                                    <option value=\\\"\\\"></option>\\r\\n                                                    <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>\\r\\n                                                </select>\\r\\n    <!--                                            <select name=\\\"\\\" *ngIf=\\\"item.inputType === 'select_multiple'\\\"-->\\r\\n    <!--                                                    multiple-->\\r\\n    <!--                                                    [ngStyle]=\\\"item.css\\\"-->\\r\\n    <!--                                                    [name]=\\\"item.label\\\"-->\\r\\n    <!--                                                    [required]=\\\"item.required\\\"-->\\r\\n    <!--                                                    [(ngModel)]=\\\"item.value\\\"-->\\r\\n    <!--                                                    (ngModelChange)=\\\"onChangeObj()\\\"-->\\r\\n    <!--                                                    [disabled]=\\\"checkDepend(block.fields, item)\\\"-->\\r\\n    <!--                                                    [attr.value]=\\\"item.value\\\"-->\\r\\n    <!--                                                    [ngClass]=\\\"{-->\\r\\n    <!--                                                       'required': formSubmitted &&-->\\r\\n    <!--                                                       form.controls[item.label] &&-->\\r\\n    <!--                                                       form.controls[item.label].errors &&-->\\r\\n    <!--                                                       (form.controls[item.label].errors.required)-->\\r\\n    <!--                                                   }\\\">-->\\r\\n    <!--                                                <option value=\\\"\\\"></option>-->\\r\\n    <!--                                                <option *ngFor=\\\"let o of item.selectOptions\\\" [value]=\\\"o\\\">{{o}}</option>-->\\r\\n    <!--                                            </select>-->\\r\\n                                                <div class=\\\"labeling-block-row-column-body-item-box-input-label\\\"\\r\\n                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-label-hover':\\r\\n                                                     item.inputType === 'text' ||\\r\\n                                                     item.inputType === 'number' ||\\r\\n                                                     item.inputType === 'email' ||\\r\\n                                                     item.inputType === 'textarea' ||\\r\\n                                                     item.inputType === 'select_multiple' ||\\r\\n                                                     item.inputType === 'select'}\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-label-text\\\">\\r\\n                                                        {{preetyLabel(item.label)}}\\r\\n                                                        <span *ngIf=\\\"item.inputType === 'text_list'\\\" class=\\\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\\\"\\r\\n                                                              (click)=\\\"appendItemToList(item)\\\">+</span>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                                <ng-container *ngIf=\\\"item.inputType === 'text_list' && isArray(item.value)\\\">\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description\\\">\\r\\n                                                        {{item.description}}\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item\\\" *ngFor=\\\"let listItem of item.value; index as i; trackBy: trackByFn\\\">\\r\\n                                                        <ng-container *ngIf=\\\"!item.listObj\\\">\\r\\n                                                            <input [type]=\\\"item.inputType\\\"\\r\\n                                                                   [name]=\\\"item.label + '-' + i\\\"\\r\\n                                                                   [required]=\\\"item.required\\\"\\r\\n                                                                   [(ngModel)]=\\\"item.value[i]\\\"\\r\\n                                                                   [ngClass]=\\\"{\\r\\n                                                                       'required': formSubmitted &&\\r\\n                                                                       form.controls[item.label + '-' + i] &&\\r\\n                                                                       form.controls[item.label + '-' + i].errors &&\\r\\n                                                                       (form.controls[item.label + '-' + i].errors.required)\\r\\n                                                                   }\\\"\\r\\n                                                                   (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\" (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n                                                        </ng-container>\\r\\n                                                        <ng-container *ngIf=\\\"item.listObj\\\">\\r\\n                                                            <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-wrapper\\\"\\r\\n                                                                 [ngStyle]=\\\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\\\"\\r\\n                                                                 *ngFor=\\\"let objItem of item.value[i]; index as j;let last = last;\\\">\\r\\n                                                                <input [type]=\\\"objItem.inputType\\\"\\r\\n                                                                       [name]=\\\"item.label + '-' + objItem.label + '-' + i + '-' + j\\\"\\r\\n                                                                       [required]=\\\"objItem.required\\\"\\r\\n                                                                       [(ngModel)]=\\\"objItem.value\\\"\\r\\n                                                                       [attr.value]=\\\"objItem.value\\\"\\r\\n                                                                       [ngClass]=\\\"{\\r\\n                                                                           'required': formSubmitted &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\\r\\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\\r\\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\\r\\n                                                                       }\\\"\\r\\n                                                                       (ngModelChange)=\\\"onChangeObj()\\\">\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label\\\"\\r\\n                                                                     [ngClass]=\\\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\\\">\\r\\n                                                                    <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-label-text\\\">\\r\\n                                                                        {{preetyLabel(objItem.label)}}\\r\\n                                                                    </div>\\r\\n                                                                </div>\\r\\n                                                                <div class=\\\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\\\"\\r\\n                                                                     *ngIf=\\\"last\\\"\\r\\n                                                                     (click)=\\\"removeItemToList(item, i); onChangeObj();\\\">-</div>\\r\\n\\r\\n                                                            </div>\\r\\n                                                        </ng-container>\\r\\n                                                    </div>\\r\\n                                                </ng-container>\\r\\n                                            </div>\\r\\n                                            <small class=\\\"labeling-block-row-column-body-item-box-input-description\\\" *ngIf=\\\"item.description && item.inputType !== 'text_list'\\\">\\r\\n                                                {{item.description}}\\r\\n                                            </small>\\r\\n                                        </div>\\r\\n                                        <!--                        <div class=\\\"labeling-block-row-column-body-item-box-break-line\\\" *ngIf=\\\"item.break_line\\\"></div>-->\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"objErrMessage text-center\\\" *ngIf=\\\"objErrMessage\\\">\\r\\n                        {{objErrMessage}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n<!--    <div class=\\\"floating-template-button\\\"-->\\r\\n<!--         [ngClass]=\\\"{'floating-template-button-vertical': templateType === 2}\\\"-->\\r\\n<!--         (click)=\\\"changeTemplateType()\\\">-->\\r\\n<!--        <div class=\\\"lds-hourglass\\\"-->\\r\\n<!--             [title]=\\\"templateType === 1 ? 'vertical' : 'horizontal'\\\"-->\\r\\n<!--        [ngClass]=\\\"{'animate': changeTemplateAnimation}\\\"></div>-->\\r\\n<!--    </div>-->\\r\\n  <div class=\\\"menu\\\" [ngClass]=\\\"{'menu-hover-animate': animateMenu}\\\">\\r\\n    <div class=\\\"inner-menu\\\">\\r\\n      <i class=\\\"d-icon-sync\\\" title=\\\"change template\\\" (click)=\\\"changeTemplateType()\\\" [ngClass]=\\\"{'d-icon-animate': changeTemplateAnimation}\\\"></i>\\r\\n<!--      <i class=\\\"d-icon-reset\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"></i>-->\\r\\n      <i class=\\\"d-icon-expend\\\" title=\\\"full screen\\\" (click)=\\\"expand()\\\" [ngClass]=\\\"{'d-icon-animate': false}\\\"><span class=\\\"line\\\"></span></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".dynamic-labeling-room{height:100%;font-size:14px;position:relative;overflow:hidden}.dynamic-labeling-room .labeling{position:absolute;top:50%;left:0;right:0;overflow:hidden;background:#fff;color:#28282c}.dynamic-labeling-room .labeling .labeling-overflow{overflow-y:auto;overflow-x:hidden;height:100%}.dynamic-labeling-room .labeling-block{position:relative}.dynamic-labeling-room .labeling-block-row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.dynamic-labeling-room .labeling-block-row-column{flex:0 0 100%;max-width:100%;-webkit-box-flex:0}.dynamic-labeling-room .labeling-block-row-column-header{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%;margin-bottom:2%;font-weight:600}.dynamic-labeling-room .labeling-block-row-column-header-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body{position:relative;display:flex;flex-wrap:wrap}.dynamic-labeling-room .labeling-block-row-column-body-item{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-box{position:relative;margin-bottom:1.3rem;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input{position:relative;overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea{min-height:40px}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select{position:relative;display:block;width:100%;height:calc(1.2em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#28282c;background:#fff;background-clip:padding-box;border:1px solid #ececf0;border-radius:2px;outline:none;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea:focus,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select:focus{border:1.5px solid #2271bf}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input input.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input textarea.required,.dynamic-labeling-room .labeling-block-row-column-body-item-box-input select.required{border:1.5px solid #f80000}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-label-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-description{font-weight:400;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item{position:relative;margin-bottom:.5rem}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-minus{position:absolute;top:6.5px;right:3px;width:.7rem;cursor:pointer;color:red;font-size:1.3em;vertical-align:middle;line-height:1}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper{position:relative;display:inline-block;margin:1%;overflow:hidden;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-wrapper input[value]:not([value=\\\"\\\"])~.labeling-block-row-column-body-item-box-input-list-item-label-hover{font-size:.9em;opacity:0}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label{position:relative;color:#48484f}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-hover{position:absolute;top:0;left:0;right:0;bottom:0;line-height:2;padding:.375rem .75rem;opacity:1;pointer-events:none;transition:all .1s;display:block;z-index:1;color:#9f9fa5;font-weight:600;font-size:.85em}.dynamic-labeling-room .labeling-block-row-column-body-item-box-input-list-item-label-text{overflow:hidden}.dynamic-labeling-room .labeling-block-row-column-body-item-box-break-line{flex-basis:50%!important;max-width:100%!important;margin-right:.005%}.dynamic-labeling-room .labeling-block-row-column-body-item-box-full-line{flex-basis:100%!important;max-width:100%!important}.dynamic-labeling-room .labeling-block-row-column-body-item-box-center{margin:0 auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box{height:auto}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input{position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input checkbox-container{height:14px;width:14px;position:relative}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input input{height:14px;width:14px;display:inline-block;vertical-align:top;float:left;margin:3px 3px 3px 4px}.dynamic-labeling-room .labeling-block-row-column-body-item-checkbox .labeling-block-row-column-body-item-box-input-label{position:relative;display:inline-block;vertical-align:top}.dynamic-labeling-room .labeling-block-row-column-body-item-col{position:relative;min-height:1px;padding-left:15px;padding-right:15px;width:100%}.dynamic-labeling-room .labeling-block-fixed{position:relative}.dynamic-labeling-room .labeling-header{position:relative;margin:5px 0;font-weight:600}.dynamic-labeling-room .labeling-header-plus{position:relative;cursor:pointer;font-size:1.3em;vertical-align:middle}.dynamic-labeling-room .labeling-header-item{position:relative;line-height:1;padding:5px;box-shadow:0 0 5px #565555;background:#77f377;display:inline-block;border-radius:5px;cursor:pointer;margin:0 14px 9px 0}.dynamic-labeling-room .labeling-header-item-minus{position:absolute;top:0px;right:-5px;color:red;cursor:pointer;line-height:0;font-size:1em}.dynamic-labeling-room .labeling-header-item-selected{box-shadow:0 0 10px #000}.dynamic-labeling-room .labeling-header-item-invalid{color:#f80000}.dynamic-labeling-room .labeling-header-fixed{position:relative}.dynamic-labeling-room .view{position:absolute;top:0;left:0;right:0;overflow:hidden}.dynamic-labeling-room .view .view-text{position:absolute;top:0;right:0;left:0;bottom:0;overflow-y:auto;overflow-x:hidden;white-space:pre}.dynamic-labeling-room .view .iframe-wrapper{width:100%;height:100%;text-align:center}.dynamic-labeling-room .view .iframe-wrapper iframe{border:none;width:100%;height:100%}.dynamic-labeling-room .view .iframe-wrapper .dragging{pointer-events:none}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper{position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(255,255,255,.5)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader{position:absolute;width:35px;height:35px;top:50%;left:50%;transform:translate(-50%,-50%)}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div{box-sizing:border-box;display:block;position:absolute;width:25px;height:25px;margin:5px;border:2px solid #fff;border-radius:50%;animation:iframe-loader 1.2s cubic-bezier(.5,0,.5,1) infinite;border-color:#ccc transparent transparent transparent}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(1){animation-delay:-.45s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(2){animation-delay:-.3s}.dynamic-labeling-room .view .iframe-wrapper .iframe-loader-wrapper .iframe-loader div:nth-child(3){animation-delay:-.15s}@keyframes iframe-loader{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.dynamic-labeling-room .view-with-url{overflow:hidden}.dynamic-labeling-room .horizontal-drag{position:absolute;left:0;right:0;cursor:move;padding:5px 0;z-index:1;text-align:center}.dynamic-labeling-room .horizontal-drag-top{top:0;border-top:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-top:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid #a2e0e1;position:absolute;top:-1px}.dynamic-labeling-room .horizontal-drag-bottom{bottom:0;border-bottom:1px solid #a2e0e1}.dynamic-labeling-room .horizontal-drag-bottom:after{content:\\\"\\\";border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:6px solid #a2e0e1;position:absolute;bottom:-1px}.dynamic-labeling-room .vertical-drag{position:absolute;top:0;bottom:0;cursor:move;padding:0 3px}.dynamic-labeling-room .vertical-drag-left{border-right:1px solid #a2e0e1;right:0}.dynamic-labeling-room .vertical-drag-left:after{content:\\\"\\\";border-top:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;right:-8px;transform:translateY(-50%) rotate(45deg)}.dynamic-labeling-room .vertical-drag-right{left:0;border-left:1px solid #a2e0e1}.dynamic-labeling-room .vertical-drag-right:after{content:\\\"\\\";border-top:8px solid transparent;border-left:8px solid transparent;border-bottom:8px solid #a2e0e1;position:absolute;top:50%;left:-8px;transform:translateY(-50%) rotate(-45deg)}.dynamic-labeling-room .floating-template-button{position:absolute;top:5px;right:5px;z-index:2}.dynamic-labeling-room .floating-template-button .lds-hourglass{position:relative;width:20px;height:20px;cursor:pointer;z-index:1}.dynamic-labeling-room .floating-template-button .lds-hourglass:after{content:\\\" \\\";display:block;border-radius:50%;width:0;height:0;box-sizing:border-box;border:10px solid #79d6d7;border-color:#79d6d7 transparent #79d6d7 transparent}.dynamic-labeling-room .floating-template-button .lds-hourglass.animate:after{animation:lds-hourglass 1.2s infinite}@keyframes lds-hourglass{0%{transform:rotate(0);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{transform:rotate(900deg);animation-timing-function:cubic-bezier(.215,.61,.355,1)}to{transform:rotate(1800deg)}}.dynamic-labeling-room .menu{position:absolute;top:0;right:0;padding:5px;z-index:2;overflow:hidden}.dynamic-labeling-room .menu:before{content:\\\"\\\";position:absolute;top:0;right:0;transition:all .3s ease-in-out;border:solid 5px #79d6d7;border-left:solid 5px transparent;border-bottom:solid 5px transparent}.dynamic-labeling-room .menu .inner-menu{overflow:hidden;position:relative;transition:all .3s ease-in-out;right:-89px}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]{display:inline-block;vertical-align:middle;position:relative}.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:before,.dynamic-labeling-room .menu .inner-menu [class*=d-icon-]:after{content:\\\"\\\";pointer-events:none}.dynamic-labeling-room .menu .inner-menu i{transition:all .2s}.dynamic-labeling-room .menu .inner-menu .d-icon-sync{width:20px;height:20px;border:2px solid;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:before{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(-45deg);right:-7px;top:0}.dynamic-labeling-room .menu .inner-menu .d-icon-sync:after{position:absolute;width:0;height:0;border-width:6px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(135deg);left:-7px;bottom:0}.dynamic-labeling-room .menu .inner-menu .d-icon-expend{width:20px;height:20px;border:transparent solid 4px;border-right-color:transparent;box-sizing:border-box}.dynamic-labeling-room .menu .inner-menu .d-icon-expend .line{position:absolute;top:-3px;bottom:-3px;right:5px;transform:rotate(45deg);background:2px;border-width:.5px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:before{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);right:-7px;top:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-expend:after{position:absolute;width:0;height:0;border-width:4px;border-style:solid;border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;transform:rotate(45deg);left:-7px;bottom:-7px}.dynamic-labeling-room .menu .inner-menu .d-icon-reset{width:20px;height:20px;border-width:2px;border-style:solid}.dynamic-labeling-room .menu .inner-menu .d-icon-reset:before{position:absolute;width:0;height:0;left:-7px;bottom:0;border-width:6px;border-style:solid;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;transform:rotate(135deg)}.dynamic-labeling-room .menu .inner-menu .d-icon-reset,.dynamic-labeling-room .menu .inner-menu .d-icon-sync,.dynamic-labeling-room .menu .inner-menu .d-icon-expend{border-radius:50%;margin:4px;border-left-color:transparent}.dynamic-labeling-room .menu .inner-menu .d-icon-reset.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-sync.d-icon-animate,.dynamic-labeling-room .menu .inner-menu .d-icon-expend.d-icon-animate{animation:lds-hourglass 1s infinite}.dynamic-labeling-room .menu:hover:before,.dynamic-labeling-room .menu-hover-animate:before{border-top-color:#004a4b;border-right-color:#004a4b}.dynamic-labeling-room .menu:hover .inner-menu,.dynamic-labeling-room .menu-hover-animate .inner-menu{right:0}.dynamic-labeling-room .text-center{text-align:center}.dynamic-labeling-room .objErrMessage{color:red}.no-highlight{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}body.disable-mobile-refresh{overscroll-behavior-y:contain}*,:after,:before{box-sizing:border-box}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [DOCUMENT]\r\n                    }] }];\r\n    }, propDecorators: { dynamicLabelingRoom: [{\r\n                type: ViewChild,\r\n                args: ['dynamic_labeling_room']\r\n            }], iframe: [{\r\n                type: ViewChild,\r\n                args: ['iframe']\r\n            }], form: [{\r\n                type: ViewChild,\r\n                args: ['form']\r\n            }], mainCssObj: [{\r\n                type: Input\r\n            }], viewCssObj: [{\r\n                type: Input\r\n            }], formCssObj: [{\r\n                type: Input\r\n            }], templateType: [{\r\n                type: Input\r\n            }], data: [{\r\n                type: Input\r\n            }], obj: [{\r\n                type: Input\r\n            }], onChange: [{\r\n                type: Output\r\n            }], onMouseUp: [{\r\n                type: HostListener,\r\n                args: ['document:mouseup', ['$event']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['document:touchend', ['$event']]\r\n            }], onMouseMove: [{\r\n                type: HostListener,\r\n                args: ['document:mousemove', ['$event']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['document:touchmove', ['$event']]\r\n            }] } });\r\nclass DsProjectRoomBlock {\r\n    constructor(obj) {\r\n        this.blockName = '';\r\n        this.blockDesc = '';\r\n        this.fields = [];\r\n        this.isValid = true;\r\n        if (obj) {\r\n            if (obj.blockName) {\r\n                this.blockName = obj.blockName;\r\n            }\r\n            if (obj.blockDesc) {\r\n                this.blockDesc = obj.blockDesc;\r\n            }\r\n            if (obj.numColumns) {\r\n                this.numColumns = obj.numColumns;\r\n            }\r\n            if (obj.fields) {\r\n                for (const i in obj.fields) {\r\n                    this.fields.push(new DsProjectRoomBlockField(obj.fields[i]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DsProjectRoomBlockField {\r\n    constructor(obj) {\r\n        this.label = '';\r\n        this.description = '';\r\n        this.value = '';\r\n        this.inputType = '';\r\n        if (obj) {\r\n            for (const key in obj) {\r\n                if (obj[key] !== undefined && obj[key] !== null) {\r\n                    this[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DsProjectRoomData {\r\n    constructor(obj) {\r\n        this.text = '';\r\n        this.url = '';\r\n        this.showInIframe = false;\r\n        if (obj) {\r\n            for (const key in obj) {\r\n                if (obj[key] !== undefined && obj[key] !== null) {\r\n                    this[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\nclass DynamicLabelingRoomModule {\r\n}\r\nDynamicLabelingRoomModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nDynamicLabelingRoomModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, declarations: [DynamicLabelingRoomComponent,\r\n        SafePipe], imports: [CommonModule,\r\n        FormsModule,\r\n        HttpClientModule], exports: [DynamicLabelingRoomComponent] });\r\nDynamicLabelingRoomModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            HttpClientModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DynamicLabelingRoomModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        DynamicLabelingRoomComponent,\r\n                        SafePipe\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        HttpClientModule\r\n                    ],\r\n                    exports: [\r\n                        DynamicLabelingRoomComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of dynamic-labeling-room\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DsProjectRoomBlock, DsProjectRoomBlockField, DsProjectRoomData, DynamicLabelingRoomComponent, DynamicLabelingRoomModule, DynamicLabelingRoomService };\n//# sourceMappingURL=dynamic-labeling-room.mjs.map\n","map":{"version":3,"file":"dynamic-labeling-room.mjs","sources":["../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.service.ts","../../../projects/dynamic-labeling-room/src/lib/safe.pipe.ts","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.component.ts","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.component.html","../../../projects/dynamic-labeling-room/src/lib/dynamic-labeling-room.module.ts","../../../projects/dynamic-labeling-room/src/public-api.ts","../../../projects/dynamic-labeling-room/src/dynamic-labeling-room.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicLabelingRoomService {\n\n  constructor() { }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safe' })\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n","import {\n    AfterViewInit,\n    Component, DoCheck, ElementRef, EventEmitter,\n    HostListener,\n    Inject, Input,\n    OnChanges,\n    OnInit, Output,\n    SimpleChanges,\n    ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {DOCUMENT, KeyValue} from '@angular/common';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n    selector: 'lib-dynamic-labeling-room',\n    templateUrl: './dynamic-labeling-room.component.html',\n    styleUrls: ['./dynamic-labeling-room.component.less'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DynamicLabelingRoomComponent implements OnInit, AfterViewInit, OnChanges {\n\n    @ViewChild('dynamic_labeling_room') dynamicLabelingRoom: any;\n    @ViewChild('iframe') iframe: any;\n    @ViewChild('form') form: NgForm;\n    private document: Document;\n    public formSubmitted = false;\n    public dragStarted = false;\n    public resetViewAnimate = false;\n    public animateMenu = false;\n    public animateMenuTimeout;\n    public changeTemplateAnimation = false;\n    public changeTemplateAnimationTimeout;\n    public currentDrag;\n    public verticalDrag: any = {\n        version: 1,\n        // all numbers are percent values\n        view: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 50,\n            right: 0,\n            left: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'top',\n                top: false,\n                bottom: 'bottom',\n                left: false,\n                right: false,\n            }\n        },\n        labeling: {\n            mousedown: false,\n            height: '',\n            top: 50,\n            bottom: 0,\n            right: 0,\n            left: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'bottom',\n                top: 'top',\n                bottom: false,\n                left: false,\n                right: false,\n            }\n        },\n        minTop: 0,\n        maxTop: 100,\n        minLeft: 0,\n        maxLeft: 100\n    };\n    public horizontalDrag: any = {\n        version: 2,\n        // all numbers are percent values\n        view: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 0,\n            right: 0,\n            left: 50,\n            marginLeft: 0,\n            marginRight: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'right',\n                top: false,\n                bottom: false,\n                left: 'left',\n                right: false,\n            }\n        },\n        labeling: {\n            mousedown: false,\n            height: '',\n            top: 0,\n            bottom: 0,\n            right: 50,\n            left: 0,\n            marginLeft: 0,\n            marginRight: 0,\n            startPos: null,\n            type: null,\n            onMove: {\n                currentPos: 'left',\n                top: false,\n                bottom: false,\n                left: false,\n                right: 'right',\n            }\n        },\n        minTop: 0,\n        maxTop: 100,\n        minLeft: 0,\n        maxLeft: 100\n    };\n    public expandDetails: any = {\n        expended: false,\n        parent: {},\n        original: {},\n        css: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        }\n    };\n    public iframeLoading = false;\n    public mainList = [];\n    public listCurrentIndex = 0;\n    public listObj: any;\n    @Input() mainCssObj;\n    @Input() viewCssObj;\n    @Input() formCssObj;\n    @Input() templateType = 1;\n    @Input() data: DsProjectRoomData = {\n        // text: 'signature',\n        // url: 'https://polkadotmama.org/board-of-directors/',\n        // // url: 'https://www.apple.com/leadership/',\n        // showInIframe: true\n        text: '',\n        url: '',\n        showInIframe: false\n    };\n    @Input() obj: DsProjectRoomBlock[] = [\n        // {\n        //     blockName: '',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'not_a_signature', inputType: 'checkbox'},\n        //         {label: 'non_english_text', inputType: 'checkbox'},\n        //         {label: 'other', inputType: 'checkbox', value: 0},\n        //         {label: 'reason', inputType: 'text', depend: 'other', dependOnValue: 1}\n        //     ],\n        // },\n        // {\n        //     blockName: 'name',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'first_name', inputType: 'text', breakLine: true, center: true},\n        //         {label: 'last_name', inputType: 'text', fullLine: true},\n        //         {label: 'prefix', inputType: 'text', center: true},\n        //     ],\n        // },\n        // {\n        //     blockName: 'connections',\n        //     numColumns: 2,\n        //     fields: [\n        //         {label: 'phones', inputType: 'text_list'},\n        //         {label: 'faxes', inputType: 'text_list'},\n        //         {label: 'comments', inputType: 'textarea'},\n        //         {label: 'other', inputType: 'checkbox', value: 0},\n        //         {label: 'type', inputType: 'select', options: ['one', 'two', 'three'], depend: 'other'}\n        //     ],\n        // }\n    ];\n    @Output() onChange: EventEmitter<any> = new EventEmitter<any>();\n    public objErrMessage = '';\n    constructor(\n        @Inject(DOCUMENT) document?: any\n    ) {\n        this.document = document;\n    }\n\n\n    listenToIframeLoad(): void {\n        if (this.iframe) {\n            this.iframeLoading = true;\n            const iframe = this.iframe.nativeElement;\n            iframe.onload = () => {\n                this.iframeLoading = false;\n            };\n        }\n    }\n\n    initObj(): void {\n        this.resetObjError();\n        this.mainList = [];\n        this.listCurrentIndex = 0;\n        const mainObj: any = this.handleInitObjIsList();\n        if (!this.obj || !this.obj.length) {\n            this.setObjError('obj have no items - please make sure obj has at least one DsProjectRoomBlock item');\n            return;\n        }\n        if (this.obj.length && !this.obj[0].fields) {\n            this.setObjError('obj have no structure - please make sure obj has at least one DsProjectRoomBlock item');\n            return;\n        }\n        for (const i in this.obj) {\n            for (const j in this.obj[i].fields) {\n                if (this.obj[i].fields[j].inputType === 'checkbox') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = 0;\n                    }\n                } else if (this.obj[i].fields[j].inputType === 'text') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = '';\n                    }\n                } else if (this.obj[i].fields[j].inputType === 'text_list') {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = [];\n                    }\n                } else {\n                    if (!this.obj[i].fields[j].value) {\n                        this.obj[i].fields[j].value = '';\n                    }\n                }\n            }\n        }\n        if (this.data && this.data.isList) {\n            this.setUpListObj();\n            this.addToMainList(this.listObj);\n            this.cleanListObj();\n            this.addToListInitObj(mainObj);\n        }\n    }\n\n    handleInitObjIsList() {\n        let returnObj = [];\n        const mainObj: any = this.obj;\n        if (mainObj.length && mainObj[0].length) {\n            this.obj = mainObj[0];\n            mainObj.shift();\n            returnObj = mainObj;\n        }\n        return returnObj;\n    }\n\n    addToListInitObj(mainObj: DsProjectRoomBlock[]) {\n        if (mainObj && mainObj.length) {\n            for (const o of mainObj) {\n                this.addToMainList(o);\n            }\n            this.listCurrentIndex = 0;\n            this.obj = this.mainList[this.listCurrentIndex];\n        }\n    }\n\n    setUpListObj() {\n        this.listObj =  JSON.parse(JSON.stringify(this.obj));\n    }\n    cleanListObj() {\n        for (const i in this.listObj) {\n            for (const j in this.listObj[i].fields) {\n                if (this.listObj[i].fields[j].inputType === 'checkbox') {\n                    this.listObj[i].fields[j].value = 0;\n                } else if (this.listObj[i].fields[j].inputType === 'text') {\n                    this.listObj[i].fields[j].value = '';\n                } else if (this.listObj[i].fields[j].inputType === 'text_list') {\n                    this.listObj[i].fields[j].value = [];\n                } else {\n                    this.listObj[i].fields[j].value = '';\n                }\n            }\n        }\n    }\n    ngOnInit(): void {\n        this.resetDrag();\n        setTimeout(() => {\n            this.firstAnimateMenu()\n        });\n    }\n\n    ngAfterViewInit(): void {\n        setTimeout(() => {\n            this.listenToIframeLoad();\n        });\n    }\n\n    checkDepend(fields, item): boolean {\n        if (!item.depend) {\n            return false;\n        }\n        const map = fields.map((o) => o.label);\n        const index = map.indexOf(item.depend);\n        let condition = fields[index].value;\n        if (item.dependOnValue) {\n            condition = fields[index].value === item.dependOnValue;\n        }\n        if (index > -1 && condition) {\n            return false;\n        } else {\n            if (item.value) {\n                setTimeout(() => {\n                    item.value = '';\n                });\n            }\n            return true;\n        }\n    }\n\n    addToMainList(listObj): void {\n        const obj = JSON.parse(JSON.stringify(listObj));\n        this.mainList.push(obj);\n        this.listCurrentIndex = this.mainList.length - 1;\n        this.obj = this.mainList[this.listCurrentIndex];\n        this.formSubmitted = false;\n        // console.log('this.mainList', this.mainList);\n    }\n\n    addToMainListIfFormIsValid(): void {\n        if (this.form && !(this.formSubmitted && this.form.invalid)) {\n            this.formSubmitted = false;\n            this.addToMainList(this.listObj);\n        } else {\n            alert('please fill all required data before adding ' + this.data.listHeader);\n        }\n    }\n    removeFromMainList(index): void {\n        this.mainList.splice(index, 1);\n        // console.log('this.listCurrentIndex', this.listCurrentIndex)\n        // console.log('index', index)\n        if (this.listCurrentIndex > 0) {\n            this.listCurrentIndex--;\n        } else {\n            this.listCurrentIndex = 0;\n        }\n        this.obj = this.mainList[this.listCurrentIndex];\n    }\n    selectMainItem(index): void {\n        this.listCurrentIndex = index;\n        console.log('this.mainList[this.listCurrentIndex]', this.mainList[this.listCurrentIndex]);\n        this.obj = this.mainList[this.listCurrentIndex];\n    }\n    getMainObjHeader(index): string {\n        let header =  (this.data.listItemDefaultHeader ? this.data.listItemDefaultHeader + ' ' : 'Item ') + (index + 1);\n        try {\n            let firstLabelValue = '';\n            let secondLabelValue = '';\n            if (this.data.listFirstItemIndex >= 0\n                && this.mainList[index]\n                && this.mainList[index][this.data.listObjIndex]\n                && this.mainList[index][this.data.listObjIndex].fields\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex]) {\n                firstLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listFirstItemIndex].value;\n            }\n            if (this.data.listSecondItemIndex >= 0\n                && this.mainList[index]\n                && this.mainList[index][this.data.listObjIndex]\n                && this.mainList[index][this.data.listObjIndex].fields\n                && this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex]) {\n                secondLabelValue = this.mainList[index][this.data.listObjIndex].fields[this.data.listSecondItemIndex].value;\n            }\n            if (firstLabelValue || secondLabelValue) {\n                if (secondLabelValue) {\n                    firstLabelValue += ' ';\n                }\n                header = firstLabelValue + secondLabelValue;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return header;\n    }\n    appendItemToList(item): void {\n        let val = '';\n        if (item.listObj) {\n            val = this.cloneObject(item.listObj);\n        }\n        item.value.push(val);\n    }\n    removeItemToList(item, index): void {\n        item.value.splice(index, 1);\n    }\n    cloneObject(obj): any {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    isArray(arr): boolean {\n        return Array.isArray(arr);\n    }\n    trackByFn(index: any, item: any): number {\n        return index;\n    }\n    originalObjectOrder(a: KeyValue<number, string>, b: KeyValue<number, string>): number {\n        return 0;\n    }\n    preetyLabel(label): string {\n        if (!label) {\n            return;\n        }\n        const str =  label.replace(/_/g, ' ').replace(/-/g, ' ');\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    onMouseDown(e: any, name: string, type: string): void {\n        const pos = this.getPointerPos(e, false);\n        this.currentDrag[name].mousedown = true;\n        this.currentDrag[name].startPos = pos;\n        this.currentDrag[name].type = type;\n        this.dragStarted = true;\n        this.document.body.classList.add('disable-mobile-refresh');\n    }\n\n    @HostListener('document:mouseup', ['$event'])\n    @HostListener('document:touchend', ['$event'])\n    onMouseUp(e): void {\n        if (this.currentDrag.view.mousedown) {\n            this.currentDrag.view.mousedown = false;\n            this.currentDrag.view.startPos = null;\n        }\n        if (this.currentDrag.labeling.mousedown) {\n            this.currentDrag.labeling.mousedown = false;\n            this.currentDrag.labeling.startPos = null;\n        }\n        this.dragStarted = false;\n        this.document.body.classList.remove('disable-mobile-refresh');\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    @HostListener('document:touchmove', ['$event'])\n    onMouseMove(e): void {\n        if (this.dragStarted) {\n            let type = '';\n            if (this.currentDrag.view.mousedown) {\n                type = 'view';\n            }\n            if (this.currentDrag.labeling.mousedown) {\n                type = 'labeling';\n            }\n            if (!type) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            const pos = this.getPointerPos(e, false);\n            const moveX = pos.x - this.currentDrag[type].startPos.x;\n            const moveY = pos.y - this.currentDrag[type].startPos.y;\n            const moveXPercent = moveX / this.dynamicLabelingRoom.nativeElement.clientWidth * 100;\n            const moveYPercent = moveY / this.dynamicLabelingRoom.nativeElement.clientHeight * 100;\n            // if (this.currentDrag[type].onMove.currentPos === 'top') {\n            //     moveYPercent = -moveYPercent;\n            // }\n            if (this.currentDrag.version === 1) {\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\n            } else if (this.currentDrag.version === 2) {\n                this.onMoveVersion1(type, moveXPercent, moveYPercent);\n            } else if (this.currentDrag.version === 3) {\n                // this.onMoveVersion3(type, moveXPercent, moveYPercent);\n            }\n            this.onMoveLimitTopBottom();\n            this.onMoveLimitLeft();\n            this.onMoveLimitRight();\n\n            // if (this.currentDrag.labeling.height < 0) {\n            //     this.currentDrag.datasets.height = 0;\n            //     this.currentDrag.serviceResults.top = this.currentDrag.minTop;\n            //     this.currentDrag.view.top = this.currentDrag.minTop;\n            // }\n            // if (this.currentDrag.datasets.height > this.currentDrag.maxTop) {\n            //     this.currentDrag.datasets.height = this.currentDrag.maxTop;\n            //     this.currentDrag.serviceResults.top = 100;\n            //     this.currentDrag.view.top = 100;\n            // }\n            // if (this.currentDrag.serviceResults.left < this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft) {\n            //     this.currentDrag.serviceResults.left = this.currentDrag.minLeft - this.currentDrag.serviceResults.marginLeft;\n            //     this.currentDrag.view.right = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\n            // }\n            // if (this.currentDrag.serviceResults.left > this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft) {\n            //     this.currentDrag.serviceResults.left = this.currentDrag.maxLeft + this.currentDrag.serviceResults.marginLeft;\n            //     this.currentDrag.view.right = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\n            // }\n            this.currentDrag[type].startPos = pos;\n        }\n    }\n\n    /**\n     * Get the pointer position\n     * param {any} e (event)\n     * param {any} preventTouch\n     * return {Object} { x: , y: }\n     */\n    getPointerPos(e: any, preventTouch): any {\n        let x = 0;\n        let y = 0;\n        if (e.clientX !== undefined && e.clientY !== undefined) {\n            x = e.clientX;\n            y = e.clientY;\n        } else if (e.taretTouches) {\n            if (preventTouch) {\n                e.preventDefault();\n            }\n            x = e.taretTouches[0].clientX;\n            y = e.taretTouches[0].clientY;\n        } else if (e.touches) {\n            if (preventTouch) {\n                e.preventDefault();\n            }\n            x = e.touches[0].clientX;\n            y = e.touches[0].clientY;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n\n    onMoveLimitTopBottom(): void {\n        if (this.currentDrag.labeling.onMove.top) {\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.top]);\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] < 0) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = 0;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] > this.currentDrag.maxTop) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.labeling.onMove.bottom) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] < 0) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = 0;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] > this.currentDrag.maxTop) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.view.onMove.top) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] < 0) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = 0;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.top] > this.currentDrag.maxTop) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] = this.currentDrag.maxTop;\n            }\n        }\n        if (this.currentDrag.view.onMove.bottom) {\n            // console.log(this.currentDrag.view[this.currentDrag.view.onMove.bottom]);\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] < 0) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = 0;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.bottom] > this.currentDrag.maxTop) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] = this.currentDrag.maxTop;\n            }\n        }\n    }\n    onMoveLimitLeft(): void {\n        if (this.currentDrag.labeling.onMove.left) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] < this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.minLeft - this.currentDrag.labeling.marginLeft;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginLeft;\n            }\n        }\n        if (this.currentDrag.view.onMove.left) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] < this.currentDrag.minLeft - this.currentDrag.view.marginLeft) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.minLeft - this.currentDrag.view.marginLeft;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.left] > this.currentDrag.maxLeft + this.currentDrag.view.marginLeft) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] = this.currentDrag.maxLeft + this.currentDrag.view.marginLeft;\n            }\n        }\n    }\n    onMoveLimitRight(): void {\n        if (this.currentDrag.labeling.onMove.right) {\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.labeling.marginRight;\n            }\n            if (this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] < this.currentDrag.minLeft - this.currentDrag.labeling.marginRight) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] = this.currentDrag.minLeft - this.currentDrag.labeling.marginRight;\n            }\n        }\n        if (this.currentDrag.view.onMove.right) {\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] > this.currentDrag.maxLeft + this.currentDrag.view.marginRight) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.maxLeft + this.currentDrag.view.marginRight;\n            }\n            if (this.currentDrag.view[this.currentDrag.view.onMove.right] < this.currentDrag.minLeft - this.currentDrag.view.marginRight) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] = this.currentDrag.minLeft - this.currentDrag.view.marginRight;\n            }\n        }\n    }\n\n    onMoveVersion1(type, moveXPercent, moveYPercent): void {\n        if (this.currentDrag[type].type.indexOf('bottom') > -1) {\n            if (this.currentDrag.labeling.onMove.top) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.top] += moveYPercent;\n            }\n            if (this.currentDrag.labeling.onMove.bottom) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.bottom] -= moveYPercent;\n            }\n            if (this.currentDrag.view.onMove.top) {\n                this.currentDrag.view[this.currentDrag.view.onMove.top] += moveYPercent;\n            }\n            if (this.currentDrag.view.onMove.bottom) {\n                this.currentDrag.view[this.currentDrag.view.onMove.bottom] -= moveYPercent;\n            }\n        }\n        if (this.currentDrag[type].type.indexOf('left') > -1) {\n            // console.log(this.currentDrag.labeling[this.currentDrag.labeling.onMove.left])\n            // this.currentDrag.serviceResults.left += moveXPercent;\n            // this.currentDrag.view.right -= moveXPercent;\n            if (this.currentDrag.labeling.onMove.left) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.labeling.onMove.right) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.left) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.right) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\n            }\n        }\n        else if (this.currentDrag[type].type.indexOf('right') > -1) {\n            // this.currentDrag.serviceResults.left += moveXPercent;\n            // this.currentDrag.view.right -= moveXPercent;\n            if (this.currentDrag.labeling.onMove.left) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.labeling.onMove.right) {\n                this.currentDrag.labeling[this.currentDrag.labeling.onMove.right] -= moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.left) {\n                this.currentDrag.view[this.currentDrag.view.onMove.left] += moveXPercent;\n            }\n            if (this.currentDrag.view.onMove.right) {\n                this.currentDrag.view[this.currentDrag.view.onMove.right] -= moveXPercent;\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.obj) {\n            this.initObj();\n            this.onChangeObj();\n        }\n        if (changes.data && !changes.data.firstChange) {\n            setTimeout(() => {\n                this.listenToIframeLoad();\n            });\n        }\n        if (changes.templateType && !changes.templateType.firstChange) {\n            this.resetView();\n            this.animateChangingTemplate();\n        }\n    }\n\n    resetDrag(): void {\n        if (this.templateType === 1) {\n            this.currentDrag = JSON.parse(JSON.stringify(this.verticalDrag));\n        } else {\n            this.currentDrag = JSON.parse(JSON.stringify(this.horizontalDrag));\n        }\n    }\n\n    resetView(): void {\n        this.resetViewAnimate = true;\n        this.resetDrag();\n        setTimeout(() => {\n            this.resetViewAnimate = false;\n        }, 300);\n    }\n\n    changeTemplateType(): void {\n        if (this.templateType === 1) {\n            this.templateType = 2;\n        } else {\n            this.templateType = 1;\n        }\n        this.resetView();\n        this.animateChangingTemplate();\n    }\n\n    animateChangingTemplate(): void {\n        clearTimeout(this.changeTemplateAnimationTimeout);\n        this.changeTemplateAnimation = true;\n        this.changeTemplateAnimationTimeout = setTimeout(() => {\n            this.changeTemplateAnimation = false;\n        }, 1000);\n    }\n\n    onChangeObj(): void {\n        if (this.form) {\n            this.mainList[this.listCurrentIndex].isValid = !this.form.invalid;\n            this.formSubmitted = true;\n            this.form.onSubmit(undefined);\n            if (this.data && this.data.isList) {\n                const isValid = this.checkValidList();\n                const map = this.mainList.map((o) => this.getFinalObject(o));\n                const obj = {\n                    obj: this.mainList,\n                    valid: isValid,\n                    cleanBlocks: map,\n                };\n                this.onChange.emit(obj);\n            } else {\n                const obj = {\n                    obj: this.obj,\n                    valid: !this.form.invalid,\n                    cleanBlocks: this.getFinalObject(this.obj)\n                };\n                this.onChange.emit(obj);\n            }\n        }\n    }\n\n    getFinalObject(currrentObj): any[] {\n        const cleanBlocks = [];\n        for (const block of currrentObj) {\n            const obj = {\n                blockName: block.blockName, fields: []\n            };\n            for (const field of block.fields) {\n                const val = field.value === undefined ?\n                    (field.inputType === 'checkbox' ? 0 :\n                            (field.inputType === 'text_list' ? [] : '')\n                    ) : field.value;\n                if (field.value.length) {\n                    obj.fields.push({\n                        label: field.label, value: field.value\n                    });\n                }\n            }\n            cleanBlocks.push(obj);\n        }\n        return cleanBlocks;\n    }\n\n    checkValidList(): boolean {\n        const cleanBlocks = [];\n        let valid = true;\n        for (const currentObj of this.mainList) {\n            for (const block of currentObj) {\n                for (const field of block.fields) {\n                    if (!field.value && field.required) {\n                        valid = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return valid;\n    }\n\n    getObjKeysLength(listObj): number {\n        return Object.keys(listObj).length;\n    }\n\n    firstAnimateMenu() {\n        clearTimeout(this.animateMenuTimeout);\n        this.animateMenu = true;\n        this.animateMenuTimeout = setTimeout(() => {\n            this.animateMenu = false;\n        }, 300 * 4);\n    }\n    expand() {\n        const el = this.dynamicLabelingRoom.nativeElement;\n        const rect = el.getBoundingClientRect();\n        const animation = 500;\n        if (!this.expandDetails.expended) {\n            const parent = el.parentElement;\n            this.expandDetails.parent = parent;\n            this.expandDetails.original = rect;\n            el.style.position = 'fixed';\n            el.style.background = '#fff';\n            el.style.zIndex = '9999';\n            el.style.top = rect.top + 'px';\n            el.style.left = rect.left + 'px';\n            el.style.width = rect.width + 'px';\n            el.style.height = rect.height + 'px';\n            requestAnimationFrame(() => {\n                el.style.transition = 'all ' + animation + 'ms ease-in-out';\n                el.style.top = '0';\n                el.style.left = '0';\n                el.style.width = '100%';\n                el.style.height = '100%';\n                this.expandDetails.expended = true;\n            });\n        } else {\n            requestAnimationFrame(() => {\n                el.style.top = this.expandDetails.original.top + 'px';\n                el.style.left = this.expandDetails.original.left + 'px';\n                el.style.width = this.expandDetails.original.width + 'px';\n                el.style.height = this.expandDetails.original.height + 'px';\n                setTimeout(() => {\n                    el.style.transition = '';\n                    el.style.position = '';\n                    el.style.background = '';\n                    el.style.zIndex = '';\n                    el.style.top = '';\n                    el.style.left = '';\n                    el.style.width = '';\n                    el.style.height = '';\n                    this.expandDetails.expended = false;\n                }, animation);\n            });\n        }\n        // el.animate([\n        //     {top: '0'},\n        //     {left: '0'},\n        //     {width: '100%'},\n        //     {height: '100%'},\n        // ], {\n        //   duration: 1500,\n        //   fill: 'forwards',\n        // });\n        // let transform = 'translateY(-' + rect.top + 'px)';\n        // transform += ' translateX(-' + rect.left + 'px)';\n        // transform += ' translateX(-' + rect.left + 'px)';\n        // el.animate([\n        //   // keyframes\n        //   { transform: 'translateY(-' + rect.top + 'px)' + ' translateX(-' + rect.left + 'px)' }\n        // ], {\n        //   // timing options\n        //   duration: 1000,\n        //   easing: 'ease-in-out',\n        //   fill: 'forwards',\n        // });\n    }\n\n    setObjError(err) {\n        this.objErrMessage = err;\n    }\n    resetObjError() {\n        this.objErrMessage = '';\n    }\n}\n\nexport class DsProjectRoomBlock {\n    blockName = '';\n    blockDesc = '';\n    numColumns: 2;\n    fields: DsProjectRoomBlockField[] = [];\n    isValid = true;\n\n    constructor(obj?) {\n        if (obj) {\n            if (obj.blockName) {\n                this.blockName = obj.blockName;\n            }\n            if (obj.blockDesc) {\n                this.blockDesc = obj.blockDesc;\n            }\n            if (obj.numColumns) {\n                this.numColumns = obj.numColumns;\n            }\n            if (obj.fields) {\n                for (const i in obj.fields) {\n                    this.fields.push( new DsProjectRoomBlockField(obj.fields[i]));\n                }\n            }\n        }\n    }\n}\n\nexport class DsProjectRoomBlockField {\n    label = '';\n    description = '';\n    value: any = '';\n    inputType = '';\n    required?: boolean;\n    pattern?: string;\n    listObj?: any;\n    depend: string;\n    dependOnValue: any;\n    breakLine: boolean;\n    fullLine: boolean;\n    center: boolean;\n    selectOptions: any[];\n    css: any;\n\n    constructor(obj?) {\n        if (obj) {\n            for (const key in obj) {\n                if (obj[key] !== undefined && obj[key] !== null) {\n                    this[key] = obj[key];\n                }\n            }\n        }\n    }\n}\n\nexport class DsProjectRoomData {\n    text = '';\n    url = '';\n    showInIframe = false;\n    isList?: boolean;\n    listHeader?: string;\n    listHeaderFixed?: boolean;\n    listItemDefaultHeader?: string;\n    listObjIndex?: number;\n    listFirstItemIndex?: number;\n    listSecondItemIndex?: number;\n\n    constructor(obj?) {\n        if (obj) {\n            for (const key in obj) {\n                if (obj[key] !== undefined && obj[key] !== null) {\n                    this[key] = obj[key];\n                }\n            }\n        }\n    }\n}\n","<div class=\"dynamic-labeling-room\" #dynamic_labeling_room\r\n     *ngIf=\"data && obj\"\r\n     [ngStyle]=\"mainCssObj\">\r\n    <div class=\"view\"\r\n         [ngClass]=\"{'view-with-url': data.url, 'animated-all': resetViewAnimate}\"\r\n         [ngStyle]=\"{\r\n            'height': (currentDrag.view.height !== '' ? currentDrag.view.height + '%' : ''),\r\n            'top': currentDrag.view.top + '%',\r\n            'bottom': currentDrag.view.bottom + '%',\r\n            'left': currentDrag.view.left + '%',\r\n            'right': currentDrag.view.right + '%'\r\n            }\">\r\n        <div class=\"view-text\"\r\n             [style]=\"!data.url ? viewCssObj : ''\"\r\n             *ngIf=\"!data.url && data.text\">{{data.text}}</div>\r\n        <!--        <div *ngIf=\"show.url\"><a [href]=\"show.url\" target=\"_blank\">{{show.url}}</a></div>-->\r\n        <div class=\"iframe-wrapper\" *ngIf=\"data.url\">\r\n            <ng-container *ngIf=\"data.showInIframe\">\r\n                <div class=\"iframe-loader-wrapper\" *ngIf=\"iframeLoading\">\r\n                    <div class=\"iframe-loader\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n                <iframe [ngClass]=\"{'dragging': dragStarted}\" #iframe [src]=\"data.url | safe\"></iframe>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!data.showInIframe\">\r\n                <a [href]=\"data.url\" target=\"_blank\">{{data.url}}</a>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"horizontal-drag horizontal-drag-bottom\"\r\n             *ngIf=\"currentDrag.view.onMove.bottom\"\r\n             (mousedown)=\"onMouseDown($event, 'view', 'top, bottom')\"\r\n             (touchstart)=\"onMouseDown($event, 'view', 'top, bottom')\"></div>\r\n        <div class=\"vertical-drag vertical-drag-right\"\r\n             *ngIf=\"currentDrag.view.onMove.left\"\r\n             (mousedown)=\"onMouseDown($event, 'view', 'left, right')\"\r\n             (touchstart)=\"onMouseDown($event, 'view', 'left, right')\"></div>\r\n    </div>\r\n    <form #form=\"ngForm\">\r\n        <div class=\"labeling\"\r\n             [ngClass]=\"{'animated-all': resetViewAnimate}\"\r\n             [ngStyle]=\"{\r\n                'height': (currentDrag.labeling.height !== '' ? currentDrag.labeling.height + '%' : ''),\r\n                'top': currentDrag.labeling.top + '%',\r\n                'bottom': currentDrag.labeling.bottom + '%',\r\n                'left': currentDrag.labeling.left + '%',\r\n                'right': currentDrag.labeling.right + '%'\r\n                }\">\r\n            <div class=\"horizontal-drag horizontal-drag-top\"\r\n                 *ngIf=\"currentDrag.labeling.onMove.top\"\r\n                 (mousedown)=\"onMouseDown($event, 'labeling', 'top, bottom')\"\r\n                 (touchstart)=\"onMouseDown($event, 'labeling', 'top, bottom')\"></div>\r\n            <div class=\"vertical-drag vertical-drag-left\"\r\n                 *ngIf=\"currentDrag.labeling.onMove.right\"\r\n                 (mousedown)=\"onMouseDown($event, 'labeling', 'left, right')\"\r\n                 (touchstart)=\"onMouseDown($event, 'labeling', 'left, right')\"></div>\r\n            <div class=\"labeling-overflow\"\r\n                 [style]=\"formCssObj\">\r\n                <div class=\"labeling-header\" *ngIf=\"data.isList\" [ngClass]=\"{'labeling-header-fixed': data.isList && data.listHeaderFixed}\">\r\n                    {{data.listHeader}} <span class=\"labeling-header-plus no-highlight\"\r\n                                              (click)=\"addToMainList(listObj)\">+</span>\r\n                    <br>\r\n                    <div class=\"labeling-header-item no-highlight\" *ngFor=\"let item of mainList; let i = index\"\r\n                         (click)=\"selectMainItem(i)\"\r\n                         [ngClass]=\"{'labeling-header-item-selected': listCurrentIndex === i, 'labeling-header-item-invalid': mainList[i].isValid !== undefined && !mainList[i].isValid}\">\r\n                        {{getMainObjHeader(i)}} <span *ngIf=\"mainList.length > 1\" class=\"labeling-header-item-minus no-highlight\" (click)=\"removeFromMainList(i)\">x</span>\r\n\r\n                    </div>\r\n                </div>\r\n                <div [ngClass]=\"{'labeling-block-fixed': data.isList && data.listHeaderFixed}\">\r\n                    <div class=\"labeling-block\" *ngFor=\"let block of obj\">\r\n                        <div class=\"labeling-block-row\">\r\n                            <div class=\"labeling-block-row-column\">\r\n                                <div class=\"labeling-block-row-column-header\">\r\n                                    {{preetyLabel(block.blockName)}}\r\n                                    <div class=\"labeling-block-row-column-header-description\">\r\n                                        {{block.blockDesc}}\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"labeling-block-row-column-body\">\r\n                                    <div class=\"labeling-block-row-column-body-item labeling-block-row-column-body-item-col\r\n                                labeling-block-row-column-body-item-{{item.inputType}}\"\r\n                                         *ngFor=\"let item of block.fields\"\r\n                                         [ngStyle]=\"{\r\n                                    'flex': '0 0 ' + (10/block.numColumns*10) + '%',\r\n                                    'max-width': (10/block.numColumns*10) + '%'\r\n                                   }\"\r\n                                         [ngClass]=\"{\r\n                                 'labeling-block-row-column-body-item-box-break-line': item.breakLine,\r\n                                 'labeling-block-row-column-body-item-box-full-line': item.fullLine,\r\n                                 'labeling-block-row-column-body-item-box-center': item.center\r\n                                 }\">\r\n                                        <div class=\"labeling-block-row-column-body-item-box\">\r\n                                            <div class=\"labeling-block-row-column-body-item-box-input\">\r\n                                                <input *ngIf=\"item.inputType === 'text' || item.inputType === 'number' || item.inputType === 'email'\"\r\n                                                       [type]=\"item.inputType\"\r\n                                                       [ngStyle]=\"item.css\"\r\n                                                       [name]=\"item.label\"\r\n                                                       [required]=\"item.required\"\r\n                                                       [pattern]=\"item.pattern\"\r\n                                                       [(ngModel)]=\"item.value\"\r\n                                                       (ngModelChange)=\"onChangeObj()\"\r\n                                                       [attr.value]=\"item.value\"\r\n                                                       [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required || form.controls[item.label].errors.pattern)\r\n                                                       }\"\r\n                                                       [disabled]=\"checkDepend(block.fields, item)\">\r\n                                                <input *ngIf=\"item.inputType === 'checkbox'\"\r\n                                                       [type]=\"item.inputType\"\r\n                                                       [ngModel]=\"item.value\"\r\n                                                       [ngStyle]=\"item.css\"\r\n                                                       [name]=\"item.label\"\r\n                                                       [required]=\"item.required\"\r\n                                                       [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required)\r\n                                                       }\"\r\n                                                       (change)=\"!item.value ? item.value = 1 : item.value = 0; onChangeObj()\">\r\n                                                <textarea *ngIf=\"item.inputType === 'textarea'\"\r\n                                                          [ngStyle]=\"item.css\"\r\n                                                          [name]=\"item.label\"\r\n                                                          [required]=\"item.required\"\r\n                                                          [(ngModel)]=\"item.value\"\r\n                                                          (ngModelChange)=\"onChangeObj()\"\r\n                                                          [attr.value]=\"item.value\"\r\n                                                          [ngClass]=\"{\r\n                                                              'required': formSubmitted &&\r\n                                                              form.controls[item.label] &&\r\n                                                              form.controls[item.label].errors &&\r\n                                                              (form.controls[item.label].errors.required)\r\n                                                          }\"\r\n                                                          [disabled]=\"checkDepend(block.fields, item)\">\r\n                                                </textarea>\r\n                                                <select name=\"\" *ngIf=\"item.inputType === 'select'\"\r\n                                                        [ngStyle]=\"item.css\"\r\n                                                        [name]=\"item.label\"\r\n                                                        [required]=\"item.required\"\r\n                                                        [(ngModel)]=\"item.value\"\r\n                                                        (ngModelChange)=\"onChangeObj()\"\r\n                                                        [disabled]=\"checkDepend(block.fields, item)\"\r\n                                                        [attr.value]=\"item.value\"\r\n                                                        [ngClass]=\"{\r\n                                                           'required': formSubmitted &&\r\n                                                           form.controls[item.label] &&\r\n                                                           form.controls[item.label].errors &&\r\n                                                           (form.controls[item.label].errors.required)\r\n                                                       }\">\r\n                                                    <option value=\"\"></option>\r\n                                                    <option *ngFor=\"let o of item.selectOptions\" [value]=\"o\">{{o}}</option>\r\n                                                </select>\r\n    <!--                                            <select name=\"\" *ngIf=\"item.inputType === 'select_multiple'\"-->\r\n    <!--                                                    multiple-->\r\n    <!--                                                    [ngStyle]=\"item.css\"-->\r\n    <!--                                                    [name]=\"item.label\"-->\r\n    <!--                                                    [required]=\"item.required\"-->\r\n    <!--                                                    [(ngModel)]=\"item.value\"-->\r\n    <!--                                                    (ngModelChange)=\"onChangeObj()\"-->\r\n    <!--                                                    [disabled]=\"checkDepend(block.fields, item)\"-->\r\n    <!--                                                    [attr.value]=\"item.value\"-->\r\n    <!--                                                    [ngClass]=\"{-->\r\n    <!--                                                       'required': formSubmitted &&-->\r\n    <!--                                                       form.controls[item.label] &&-->\r\n    <!--                                                       form.controls[item.label].errors &&-->\r\n    <!--                                                       (form.controls[item.label].errors.required)-->\r\n    <!--                                                   }\">-->\r\n    <!--                                                <option value=\"\"></option>-->\r\n    <!--                                                <option *ngFor=\"let o of item.selectOptions\" [value]=\"o\">{{o}}</option>-->\r\n    <!--                                            </select>-->\r\n                                                <div class=\"labeling-block-row-column-body-item-box-input-label\"\r\n                                                     [ngClass]=\"{'labeling-block-row-column-body-item-box-input-label-hover':\r\n                                                     item.inputType === 'text' ||\r\n                                                     item.inputType === 'number' ||\r\n                                                     item.inputType === 'email' ||\r\n                                                     item.inputType === 'textarea' ||\r\n                                                     item.inputType === 'select_multiple' ||\r\n                                                     item.inputType === 'select'}\">\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-label-text\">\r\n                                                        {{preetyLabel(item.label)}}\r\n                                                        <span *ngIf=\"item.inputType === 'text_list'\" class=\"labeling-block-row-column-body-item-box-input-label-plus no-highlight\"\r\n                                                              (click)=\"appendItemToList(item)\">+</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <ng-container *ngIf=\"item.inputType === 'text_list' && isArray(item.value)\">\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-description\" *ngIf=\"item.description\">\r\n                                                        {{item.description}}\r\n                                                    </div>\r\n                                                    <div class=\"labeling-block-row-column-body-item-box-input-list-item\" *ngFor=\"let listItem of item.value; index as i; trackBy: trackByFn\">\r\n                                                        <ng-container *ngIf=\"!item.listObj\">\r\n                                                            <input [type]=\"item.inputType\"\r\n                                                                   [name]=\"item.label + '-' + i\"\r\n                                                                   [required]=\"item.required\"\r\n                                                                   [(ngModel)]=\"item.value[i]\"\r\n                                                                   [ngClass]=\"{\r\n                                                                       'required': formSubmitted &&\r\n                                                                       form.controls[item.label + '-' + i] &&\r\n                                                                       form.controls[item.label + '-' + i].errors &&\r\n                                                                       (form.controls[item.label + '-' + i].errors.required)\r\n                                                                   }\"\r\n                                                                   (ngModelChange)=\"onChangeObj()\">\r\n                                                            <div class=\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\" (click)=\"removeItemToList(item, i); onChangeObj();\">-</div>\r\n                                                        </ng-container>\r\n                                                        <ng-container *ngIf=\"item.listObj\">\r\n                                                            <div class=\"labeling-block-row-column-body-item-box-input-list-item-wrapper\"\r\n                                                                 [ngStyle]=\"{'width': (10 / getObjKeysLength(item.listObj) * 10 - 2) + '%'}\"\r\n                                                                 *ngFor=\"let objItem of item.value[i]; index as j;let last = last;\">\r\n                                                                <input [type]=\"objItem.inputType\"\r\n                                                                       [name]=\"item.label + '-' + objItem.label + '-' + i + '-' + j\"\r\n                                                                       [required]=\"objItem.required\"\r\n                                                                       [(ngModel)]=\"objItem.value\"\r\n                                                                       [attr.value]=\"objItem.value\"\r\n                                                                       [ngClass]=\"{\r\n                                                                           'required': formSubmitted &&\r\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j] &&\r\n                                                                           form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors &&\r\n                                                                           (form.controls[item.label + '-' + objItem.label + '-' + i + '-' + j].errors.required)\r\n                                                                       }\"\r\n                                                                       (ngModelChange)=\"onChangeObj()\">\r\n                                                                <div class=\"labeling-block-row-column-body-item-box-input-list-item-label\"\r\n                                                                     [ngClass]=\"{'labeling-block-row-column-body-item-box-input-list-item-label-hover': true}\">\r\n                                                                    <div class=\"labeling-block-row-column-body-item-box-input-list-item-label-text\">\r\n                                                                        {{preetyLabel(objItem.label)}}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div class=\"labeling-block-row-column-body-item-box-input-list-item-minus no-highlight\"\r\n                                                                     *ngIf=\"last\"\r\n                                                                     (click)=\"removeItemToList(item, i); onChangeObj();\">-</div>\r\n\r\n                                                            </div>\r\n                                                        </ng-container>\r\n                                                    </div>\r\n                                                </ng-container>\r\n                                            </div>\r\n                                            <small class=\"labeling-block-row-column-body-item-box-input-description\" *ngIf=\"item.description && item.inputType !== 'text_list'\">\r\n                                                {{item.description}}\r\n                                            </small>\r\n                                        </div>\r\n                                        <!--                        <div class=\"labeling-block-row-column-body-item-box-break-line\" *ngIf=\"item.break_line\"></div>-->\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"objErrMessage text-center\" *ngIf=\"objErrMessage\">\r\n                        {{objErrMessage}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n<!--    <div class=\"floating-template-button\"-->\r\n<!--         [ngClass]=\"{'floating-template-button-vertical': templateType === 2}\"-->\r\n<!--         (click)=\"changeTemplateType()\">-->\r\n<!--        <div class=\"lds-hourglass\"-->\r\n<!--             [title]=\"templateType === 1 ? 'vertical' : 'horizontal'\"-->\r\n<!--        [ngClass]=\"{'animate': changeTemplateAnimation}\"></div>-->\r\n<!--    </div>-->\r\n  <div class=\"menu\" [ngClass]=\"{'menu-hover-animate': animateMenu}\">\r\n    <div class=\"inner-menu\">\r\n      <i class=\"d-icon-sync\" title=\"change template\" (click)=\"changeTemplateType()\" [ngClass]=\"{'d-icon-animate': changeTemplateAnimation}\"></i>\r\n<!--      <i class=\"d-icon-reset\" [ngClass]=\"{'d-icon-animate': false}\"></i>-->\r\n      <i class=\"d-icon-expend\" title=\"full screen\" (click)=\"expand()\" [ngClass]=\"{'d-icon-animate': false}\"><span class=\"line\"></span></i>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { DynamicLabelingRoomComponent } from './dynamic-labeling-room.component';\nimport {SafePipe} from './safe.pipe';\nimport {HttpClientModule} from '@angular/common/http';\n\n\n\n@NgModule({\n    declarations: [\n        DynamicLabelingRoomComponent,\n        SafePipe\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        HttpClientModule\n    ],\n    exports: [\n        DynamicLabelingRoomComponent\n    ]\n})\nexport class DynamicLabelingRoomModule { }\n","/*\n * Public API Surface of dynamic-labeling-room\n */\n\nexport * from './lib/dynamic-labeling-room.service';\nexport * from './lib/dynamic-labeling-room.component';\nexport * from './lib/dynamic-labeling-room.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}